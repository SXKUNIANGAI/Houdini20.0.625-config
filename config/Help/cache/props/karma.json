{"type": "root", "attrs": {"type": "properties"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Karma rendering properties"], "extent": [0, 31]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [51, 66], "body": [{"type": "para", "indent": 0, "text": ["These properties control rendering in Karma. They can be set with different LOP nodes in Solaris, according to their application. Karma settings nodes usually have the easiest interface for setting render properties. More generic nodes will have a ", {"type": "em", "text": ["karma"]}, " folder tab available in the parameter interface."], "extent": [66, 373]}, {"tag": "table", "attrs": {"width": "100%"}, "type": "pxml", "indent": 0, "extent": [373, 394], "body": [{"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [394, 403], "body": [{"tag": "td", "attrs": {"width": "20%"}, "type": "pxml", "indent": 8, "extent": [403, 428]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [" ", {"scheme": null, "value": "#global", "type": "link", "text": ["Global"], "fullpath": "/props/karma.html#global", "fragment": "#global"}], "extent": [428, 458]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [" ", {"scheme": "Smallicon", "value": "LOP/rendersettings", "type": "link", "text": "", "fullpath": "/props/LOP/rendersettings.html"}, " ", {"scheme": "Node", "value": "/nodes/lop/rendersettings", "type": "link", "text": ["Render Settings LOP"], "fullpath": "/nodes/lop/rendersettings.html"}], "extent": [458, 548], "body": [{"type": "para", "indent": 16, "text": [{"scheme": "Smallicon", "value": "LOP/karmarenderproperties", "type": "link", "text": "", "fullpath": "/props/LOP/karmarenderproperties.html"}, " ", {"scheme": "Node", "value": "/nodes/lop/karmarenderproperties", "type": "link", "text": ["Karma Render Settings LOP"], "fullpath": "/nodes/lop/karmarenderproperties.html"}], "extent": [548, 661]}], "container": true}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [661, 670], "body": [{"tag": "td", "attrs": {"width": "20%"}, "type": "pxml", "indent": 8, "extent": [670, 695]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [" ", {"scheme": null, "value": "#object", "type": "link", "text": ["Object"], "fullpath": "/props/karma.html#object", "fragment": "#object"}, " "], "extent": [695, 726]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [" ", {"scheme": "Smallicon", "value": "LOP/rendergeometrysettings", "type": "link", "text": "", "fullpath": "/props/LOP/rendergeometrysettings.html"}, " ", {"scheme": "Node", "value": "/nodes/lop/rendergeometrysettings", "type": "link", "text": ["Render Geometry Settings LOP"], "fullpath": "/nodes/lop/rendergeometrysettings.html"}], "extent": [726, 841]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [841, 850], "body": [{"tag": "td", "attrs": {"width": "20%"}, "type": "pxml", "indent": 8, "extent": [850, 875]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [" ", {"scheme": null, "value": "#light", "type": "link", "text": ["Light"], "fullpath": "/props/karma.html#light", "fragment": "#light"}, " "], "extent": [875, 904]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [" ", {"scheme": "Smallicon", "value": "OBJ/light", "type": "link", "text": "", "fullpath": "/props/OBJ/light.html"}, " ", {"scheme": "Node", "value": "/nodes/lop/light", "type": "link", "text": ["Light LOP"], "fullpath": "/nodes/lop/light.html"}], "extent": [904, 966]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [966, 975], "body": [{"tag": "td", "attrs": {"width": "20%"}, "type": "pxml", "indent": 8, "extent": [975, 1000]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [" ", {"scheme": null, "value": "#camera", "type": "link", "text": ["Camera"], "fullpath": "/props/karma.html#camera", "fragment": "#camera"}, " "], "extent": [1000, 1031]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [" ", {"scheme": "Smallicon", "value": "OBJ/camera", "type": "link", "text": "", "fullpath": "/props/OBJ/camera.html"}, " ", {"scheme": "Node", "value": "/nodes/lop/camera", "type": "link", "text": ["Camera LOP"], "fullpath": "/nodes/lop/camera.html"}], "extent": [1031, 1096]}], "container": true}], "container": true}, {"type": "para", "indent": 0, "text": ["For advanced users, to get a complete list of all properties defined in Karma, you can run the ", {"type": "code", "text": ["karma --all-properties"]}, " on a command line. This will print a JSON-formatted string to stdout."], "extent": [1096, 1288]}, {"type": "warning_group", "body": [{"type": "warning", "indent": 0, "role": "item", "extent": [1288, 1297], "body": [{"type": "para", "indent": 4, "text": ["Any undocumented properties may change at any time and may not be fully supported."], "extent": [1297, 1385]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 1, "id": "properties", "container": true, "type": "properties_section", "indent": 0, "role": "section", "extent": [1385, 1397], "body": [{"level": 2, "id": "global", "container": true, "type": "h", "indent": 0, "text": ["Global Properties"], "extent": [1397, 1431], "body": [{"type": "properties_item_group", "body": [{"ext": null, "type": "properties_item", "indent": 0, "text": ["Cancel Render on Missing Texture"], "role": "item", "extent": [1431, 1468], "body": [{"type": "para", "indent": 4, "text": ["Turning on this option will cause Karma to stop the render with an error if it encounters a missing texture map."], "extent": [1538, 1656]}], "container": true, "attrs": {"hprop": "karma:global:abortmissingtexture", "kagroup": "Rendering"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Cancel Render on No Working GPU Devices"], "role": "item", "extent": [1656, 1699], "body": [{"type": "para", "indent": 4, "text": ["Turning on this option will cause Karma to stop the render with an error if no working gpu devices are discovered."], "extent": [1766, 1886]}], "container": true, "attrs": {"hprop": "karma:global:abortnogpudevice", "kagroup": "Rendering"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Show Alfred Progress"], "role": "item", "extent": [1886, 1910], "body": [{"type": "para", "indent": 4, "text": ["As rendering progresses, print out progress using the Alfred progress\n    format.  For multi-frame renders, this progress will be cumulative across\n    frames (i.e. if there are 4 frames, percent complete will be 25% after the\n    first frame finishes)."], "extent": [1968, 2227]}], "container": true, "attrs": {"hprop": "karma:global:alfred", "kagroup": "Statistics"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Automatic Headlight Creation"], "role": "item", "extent": [2227, 2259], "body": [{"type": "para", "indent": 4, "text": ["If there are no lights in the scene, a headlight is created by default. To disable, turn off this checkbox."], "extent": [2321, 2434]}], "container": true, "attrs": {"hprop": "karma:global:autoheadlight", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Dicing Camera"], "role": "item", "extent": [2434, 2451], "body": [{"type": "para", "indent": 4, "text": ["Specifies a camera that is used for dicing complicated surfaces.  This can\n    provide consistent dicing of surfaces when the viewing camera is moving."], "extent": [2511, 2668]}], "container": true, "attrs": {"hprop": "karma:global:dicingcamera", "kagroup": "Dicing"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Enable Depth of Field"], "role": "item", "extent": [2668, 2693], "body": [{"type": "para", "indent": 4, "text": ["Turn on the depth of field rendering."], "extent": [2752, 2795]}], "container": true, "attrs": {"hprop": "karma:global:enable_dof", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Rendering Engine"], "role": "item", "extent": [2795, 2815], "body": [{"type": "para", "indent": 4, "text": ["Select the rendering engine."], "extent": [2872, 2906]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["CPU"], "extent": [2906, 2915], "body": [{"type": "para", "indent": 8, "text": ["Runs entirely on the CPU. Since this engine is entirely in software, it will ", {"type": "em", "text": ["generally"]}, " have more features and more correct output, however it is much slower than the ", {"scheme": null, "value": "/solaris/karma_xpu", "type": "link", "text": ["XPU engine"], "fullpath": "/solaris/karma_xpu.html"}, "."], "extent": [2915, 3125]}], "container": true}, {"type": "dt", "indent": 4, "text": ["XPU"], "extent": [3125, 3134], "body": [{"type": "para", "indent": 8, "text": ["The ", {"scheme": null, "value": "/solaris/karma_xpu", "type": "link", "text": ["XPU engine"], "fullpath": "/solaris/karma_xpu.html"}, " uses available CPU and GPU (graphics card hardware) resources. Since this engine inherits the limits of what can be done on a GPU, it will ", {"type": "em", "text": ["generally"]}, " lag behind the CPU engine in features, however it is much faster than the CPU engine."], "extent": [3134, 3416]}], "container": true}], "container": true}], "container": true, "attrs": {"hprop": "karma:global:engine", "kagroup": "Rendering"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Export Components"], "role": "item", "extent": [3416, 3437], "body": [{"type": "para", "indent": 4, "text": ["A whitespace-separated list of shading component names that will be\n    computed for export. If you have defined new component labels in your\n    materials, these can be added to the list so that they are exported for\n    per-component export planes. If you are not using some components, remove\n    them from the list to improve render efficiency."], "extent": [3500, 3854]}, {"type": "para", "indent": 4, "text": ["PBR light exports assume that this list is complete - that is, all\n    components created by shaders are listed. If there are unlisted components,\n    light exports may be missing illumination from these components."], "extent": [3854, 4075]}], "container": true, "attrs": {"hprop": "karma:global:exportcomponents", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Diffuse Components"], "role": "item", "extent": [4075, 4097], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of component types that will behave like diffuse\n    bounces.  This will affect which reflection scope is used based on the ray\n    type and also which bounce limit to use.  Uncategorized component types are\n    assumed to be reflections."], "extent": [4161, 4428]}], "container": true, "attrs": {"hprop": "karma:global:diffusecomponents", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Refract Components"], "role": "item", "extent": [4428, 4450], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of component types that will behave like refract\n    bounces.  This will affect which reflection scope is used based on the ray\n    type and also which bounce limit to use.  Uncategorized component types are\n    assumed to be reflections."], "extent": [4514, 4781]}], "container": true, "attrs": {"hprop": "karma:global:refractcomponents", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Volume Components"], "role": "item", "extent": [4781, 4802], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of component types that will behave like volume\n    bounces.  This will affect which reflection scope is used based on the ray\n    type and also which bounce limit to use.  Uncategorized component types are\n    assumed to be reflections."], "extent": [4865, 5131]}], "container": true, "attrs": {"hprop": "karma:global:volumecomponents", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["SSS Components"], "role": "item", "extent": [5131, 5149], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of component types that will behave like subsurface\n    scatter bounces.  This will affect which reflection scope is used based on\n    the ray type and also which bounce limit to use.  Uncategorized component\n    types are assumed to be reflections."], "extent": [5209, 5487]}], "container": true, "attrs": {"hprop": "karma:global:ssscomponents", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Override Lighting"], "role": "item", "extent": [5487, 5508], "body": [{"type": "para", "indent": 4, "text": ["Override lighting in the scene.  There are several options:"], "extent": [5584, 5649]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["Off: Use the lighting as defined on the USD stage"], "extent": [5649, 5705]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Emissive Objects:  Disable all light sources so that only emissive objects (geometry lights) are enabled."], "extent": [5705, 5817]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Headlight:  Disable all light sources and create a headlight"], "extent": [5817, 5884]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Dome Light:  Disable all light sources and create a dome light"], "extent": [5884, 5954]}], "container": true}], "container": true, "attrs": {"hprop": "karma:global:override_lighting", "kagroup": "Ambient Occlusion"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Disable Lighting"], "role": "item", "extent": [5954, 5974], "body": [{"type": "para", "indent": 4, "text": ["Disable all lighting and material evaluation, using only the display color\n    to shade primitives."], "extent": [6049, 6154]}], "container": true, "attrs": {"hprop": "karma:global:disable_lighting", "kagroup": "Ambient Occlusion"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Headlight AO Distance"], "role": "item", "extent": [6154, 6179], "body": [{"type": "para", "indent": 4, "text": ["When rendering in headlight mode with ambient occlusion shading, this\n    distance is used for occlusion testing.  Smaller values will result in\n    faster, but less accurate shading."], "extent": [6254, 6443]}], "container": true, "attrs": {"hprop": "karma:global:head_ao_distance", "kagroup": "Ambient Occlusion"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Headlight AO Samples"], "role": "item", "extent": [6443, 6467], "body": [{"type": "para", "indent": 4, "text": ["When rendering in headlight mode, perform this many ambient occlusion\n    samples per shade."], "extent": [6541, 6639]}], "container": true, "attrs": {"hprop": "karma:global:head_ao_samples", "kagroup": "Ambient Occlusion"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Headlight Fog Distance"], "role": "item", "extent": [6639, 6665], "body": [{"type": "para", "indent": 4, "text": ["The near/far distance for depth cue fog when lighting is disabled.  If the\n    far distance is less than the near distance, fog will be disabled."], "extent": [6739, 6890]}], "container": true, "attrs": {"hprop": "karma:global:head_depthcue_z", "kagroup": "Ambient Occlusion"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Headlight Fog Color"], "role": "item", "extent": [6890, 6913], "body": [{"type": "para", "indent": 4, "text": ["The color of the depthcue fog for disabled lighting."], "extent": [6991, 7049]}], "container": true, "attrs": {"hprop": "karma:global:head_depthcue_color", "kagroup": "Ambient Occlusion"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Headlight Fog Alpha"], "role": "item", "extent": [7049, 7072], "body": [{"type": "para", "indent": 4, "text": ["The alpha for depthcue fog when lighting is disabled."], "extent": [7150, 7209]}], "container": true, "attrs": {"hprop": "karma:global:head_depthcue_alpha", "kagroup": "Ambient Occlusion"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Convergence Mode"], "role": "item", "extent": [7209, 7229], "body": [{"type": "para", "indent": 4, "text": ["When set to Path Traced, maximum of 1 indirect ray is generated per\n    bounce. When set to Automatic, the number of indirect rays is calculated\n    based on initial noise estimate, target noise threshold, and the maximum\n    number of camera rays. Also note that under Automatic mode, number of\n    samples for direct lighting is adjusted based on noise estimate as well."], "extent": [7295, 7673]}], "container": true, "attrs": {"hprop": "karma:global:convergence_mode", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Russian Roulette Cutoff Depth"], "role": "item", "extent": [7673, 7706], "body": [{"type": "para", "indent": 4, "text": ["Depth at which indirect rays start to get stochastically pruned based on\n    ray throughput."], "extent": [7778, 7876]}], "container": true, "attrs": {"hprop": "karma:global:russianroulette_cutoff", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Constrain by Maximum Roughness"], "role": "item", "extent": [7876, 7910], "body": [{"type": "para", "indent": 4, "text": ["Roughness parameter in GGX BSDFs are clamped by the maximum roughness value\n    propagated down the ray chain in pathtracing. Enabling this option can cut\n    out a lot of noise in indirect specular (in particular, cases where glossy\n    surface is reflected by a rough specular surface) at the cost of a bit of\n    accuracy."], "extent": [7976, 8307]}], "container": true, "attrs": {"hprop": "karma:global:constrainmaxrough", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Shading Quality Multiplier"], "role": "item", "extent": [8307, 8337], "body": [{"type": "para", "indent": 4, "text": ["A multiplier on the shading quality.  This is used for texture and area\n    evaluations in shading."], "extent": [8404, 8509]}], "container": true, "attrs": {"hprop": "karma:global:shadingqualitymult", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["IPR Inc Random"], "role": "item", "extent": [8509, 8527], "body": [{"type": "para", "indent": 4, "text": ["When rendering to the Solaris viewport, this causes each render to start\n    with a new random seed."], "extent": [8586, 8692]}], "container": true, "attrs": {"hprop": "karma:global:ipr_inc_random", "kagroup": "IPR"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["IPR Bucket Size"], "role": "item", "extent": [8692, 8711], "body": [{"type": "para", "indent": 4, "text": ["The initial ", {"scheme": null, "value": "#karma:global:bucketsize", "type": "link", "text": ["bucket size"], "exists": true}, " for IPR rendering."], "extent": [8770, 8845]}], "container": true, "attrs": {"hprop": "karma:global:ipr_proxydepth", "kagroup": "IPR"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["IPR Denoise Bucket Size"], "role": "item", "extent": [8845, 8872], "body": [{"type": "para", "indent": 4, "text": ["As buckets are rendered, the coarse ", {"scheme": null, "value": "#karma:global:bucketsize", "type": "link", "text": ["bucket size"], "exists": true}, " decreases.\n    This specifies the bucket size at which Karma runs the de-noising filter on the image."], "extent": [8942, 9124]}], "container": true, "attrs": {"hprop": "karma:global:ipr_proxy_for_imagefilter", "kagroup": "IPR"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["IPR Reserve Threads"], "role": "item", "extent": [9124, 9147], "body": [{"type": "para", "indent": 4, "text": ["When rendering in IPR mode, reserve this number of threads for other\n    Houdini tasks."], "extent": [9211, 9304]}], "container": true, "attrs": {"hprop": "karma:global:ipr_reserve_threads", "kagroup": "IPR"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Image Filters"], "role": "item", "extent": [9304, 9321], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "/solaris/filters", "type": "link", "text": ["Image filters"], "fullpath": "/solaris/filters.html"}, " post-process the filtered pixels to produce the final image. This parameter takes a string containing a JSON-encoded list of filters and their arguments. Usually you don\u2019t need to craft this value by hand, it\u2019s computed by the Karma LOP from the values of filter-related parameters. See ", {"scheme": null, "value": "/solaris/filters", "type": "link", "text": ["Karma filters"], "fullpath": "/solaris/filters.html"}, " for more information."], "extent": [9379, 9759]}], "container": true, "attrs": {"hprop": "karma:global:imagefilter", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Pixel Filter"], "role": "item", "extent": [9759, 9775], "body": [{"type": "para", "indent": 4, "text": ["Specifies the distribution of samples over pixels.  A box filter will\n    distribute samples randomly over the interior of each individual pixel.  A\n    Gaussian filter will distribute samples in a disk around the pixel center,\n    but with a Gaussian distribution (instead of a uniform distribution)."], "extent": [9833, 10140]}], "container": true, "attrs": {"hprop": "karma:global:pixelfilter", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Pixel Filter Size"], "role": "item", "extent": [10140, 10161], "body": [{"type": "para", "indent": 4, "text": ["This is the size of the Pixel Filter.  A Gaussian filter with a filter size\n    of 1.8 will be slightly less blurry than a Gaussian filter with a filter\n    size of 2.0."], "extent": [10223, 10398]}], "container": true, "attrs": {"hprop": "karma:global:pixelfiltersize", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Pixel Oracle"], "role": "item", "extent": [10398, 10414], "body": [{"type": "para", "indent": 4, "text": ["When rendering, a Pixel Oracle tells karma which pixels need additional\n    sampling and which pixels are converged. This parameter tells karma which oracle to use."], "extent": [10472, 10642]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["uniform"]}], "extent": [10642, 10657], "body": [{"type": "para", "indent": 8, "text": ["Uniformly distribute rays to each pixel.  Each pixel will always get the same number of ray-samples."], "extent": [10657, 10767]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["variance"]}], "extent": [10767, 10783], "body": [{"type": "para", "indent": 8, "text": ["Distribute rays based on variance in the rendered image."], "extent": [10783, 10849]}], "container": true}], "container": true}], "container": true, "attrs": {"hprop": "karma:global:pixeloracle", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Background IPR Filter"], "role": "item", "extent": [10849, 10874], "body": [{"type": "para", "indent": 4, "text": ["JSON list of ", {"scheme": null, "value": "/solaris/filters", "type": "link", "text": ["image filters"], "fullpath": "/solaris/filters.html"}, " specifically for background image preview and\n    slap-comp of shadows and other holdout elements."], "extent": [10941, 11091]}], "container": true, "attrs": {"hprop": "karma:global:background_iprfilter", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Use Background"], "role": "item", "extent": [11091, 11109], "body": [{"type": "para", "indent": 4, "text": [{"type": "q", "text": ["Off"]}, " disables Background IPR Filter. ", {"type": "q", "text": ["Auto"]}, " enables it only for IPR. ", {"type": "q", "text": ["On"]}, "\n    enables it for both IPR and off-line rendering."], "extent": [11170, 11302]}], "container": true, "attrs": {"hprop": "karma:global:use_background", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Random Seed"], "role": "item", "extent": [11302, 11317], "body": [{"type": "para", "indent": 4, "text": ["This is the random seed to use for the render."], "extent": [11378, 11430]}], "container": true, "attrs": {"hprop": "karma:global:randomseed", "kagroup": "Rendering"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Cache Limit"], "role": "item", "extent": [11430, 11445], "body": [{"type": "para", "indent": 4, "text": ["Whether to use a fixed size cache (", {"type": "code", "text": ["karma:global:cachesize"]}, ") or whether to use a proportion of physical memory (", {"type": "code", "text": ["karma:global:cacheratio"]}, ")"], "extent": [11509, 11653]}], "container": true, "attrs": {"hprop": "karma:global:usecacheratio", "kagroup": "Rendering"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Cache Memory Ratio"], "role": "item", "extent": [11653, 11675], "body": [{"type": "para", "indent": 4, "text": ["The proportion of physical memory Karma will use for its unified cache."], "extent": [11736, 11813]}, {"type": "para", "indent": 4, "text": ["For example, with the default ", {"type": "code", "text": ["vm_cacheratio"]}, " of ", {"type": "code", "text": ["0.25"]}, " and 16 Gb of\n    physical memory, Karma will use 4 Gb for its unified cache."], "extent": [11813, 11951]}, {"type": "para", "indent": 4, "text": ["The unified cache stores dynamic, unloadable data used by the render\n    including the following:"], "extent": [11951, 12054]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["2D ", {"type": "code", "text": [".rat"]}, " texture tiles"], "extent": [12054, 12084]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["3D ", {"type": "code", "text": [".i3d"]}, " texture tiles"], "extent": [12084, 12114]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["3D ", {"type": "code", "text": [".pc"]}, " point cloud pages (when not preloaded into memory)"], "extent": [12114, 12181]}], "container": true}, {"type": "para", "indent": 4, "text": ["Note:  This value is only used for off-line rendering, not IPR."], "extent": [12181, 12250]}], "container": true, "attrs": {"hprop": "karma:global:cacheratio", "kagroup": "Rendering"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Cache Size (MB)"], "role": "item", "extent": [12250, 12269], "body": [{"type": "para", "indent": 4, "text": ["An explicit memory limit for the unified shading cache.  This is deprecated\n    in favor of using the ", {"type": "ui", "text": ["Cache Memory Ratio"]}, "."], "extent": [12329, 12460]}, {"type": "para", "indent": 4, "text": ["Note:  This value is only used for off-line rendering, not IPR."], "extent": [12460, 12529]}], "container": true, "attrs": {"hprop": "karma:global:cachesize", "kagroup": "Rendering"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Override Object Settings"], "role": "item", "extent": [12529, 12557], "body": [{"type": "para", "indent": 4, "text": ["Normally, geometry settings specified in the render settings LOP provide\n    default values for objects.  Each object can override the value of the\n    default."], "extent": [12622, 12788]}, {"type": "para", "indent": 4, "text": ["This parameter specifies a pattern of object property names whose values\n    will taken from the render settings, overriding any per-object settings.\n    For example, setting the pattern to ", {"type": "code", "text": ["diffuselimit"]}, " will override the\n    diffuse limit for all objects with the value specified on the render\n    settings LOP."], "extent": [12788, 13107]}], "container": true, "attrs": {"hprop": "karma:global:overrideobject", "kagroup": "Rendering"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Ray Bias"], "role": "item", "extent": [13107, 13119], "body": [{"type": "para", "indent": 4, "text": ["The minimum distance used when testing if ", {"type": "em", "text": ["secondary rays"]}, " from a surface intersect with other objects in the scene. The distance is measure from surface along the direction of the ray. Objects within the ray bias distance are ignored."], "extent": [13175, 13416]}], "container": true, "attrs": {"hprop": "karma:global:raybias", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Camera"], "role": "item", "extent": [13416, 13426], "body": [{"type": "para", "indent": 4, "text": ["The rendering camera."], "extent": [13489, 13516]}], "container": true, "attrs": {"hprop": "karma:global:rendercamera", "kagroup": "Rendering"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Resolution"], "role": "item", "extent": [13516, 13530], "body": [{"type": "para", "indent": 4, "text": ["The resolution of the image to be rendered."], "extent": [13591, 13640]}], "container": true, "attrs": {"hprop": "karma:global:resolution", "kagroup": "Rendering"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Data Window"], "role": "item", "extent": [13640, 13655], "body": [{"type": "para", "indent": 4, "text": ["This is the region of the image that will be rendered.  If the region is\n    smaller than the full image, the data window will act as a crop region.  If\n    the data window is larger than the full window, the data window will act as\n    overscan rendering.  The data window is specified in pixels."], "extent": [13716, 14019]}], "container": true, "attrs": {"hprop": "karma:global:img_datawindow", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Pixel Aspect Ratio"], "role": "item", "extent": [14019, 14041], "body": [{"type": "para", "indent": 4, "text": ["Most pixels are square.  However, some display devices have non-square\n    pixels.  This option specifies the pixel aspect ratio."], "extent": [14104, 14239]}], "container": true, "attrs": {"hprop": "karma:global:img_pixel_aspect", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Sample Filter"], "role": "item", "extent": [14239, 14256], "body": [{"type": "para", "indent": 4, "text": ["Sample filters are used to modify samples before they are sent to pixel\n    filters."], "extent": [14315, 14405]}, {"type": "para", "indent": 4, "text": ["This parameter specifies a list of filters.  These filters are specified as\n    a JSON list."], "extent": [14405, 14503]}], "container": true, "attrs": {"hprop": "karma:global:samplefilter", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Pixel Samples"], "role": "item", "extent": [14503, 14520], "body": [{"type": "para", "indent": 4, "text": ["The number of ray-samples sent through each pixel. More samples will result in a less noisy image. ", {"type": "q", "text": []}, "Pixel Samples", {"type": "q", "text": [" and "]}, "Primary Samples\" are the same."], "extent": [14585, 14742]}], "container": true, "attrs": {"hprop": "karma:global:samplesperpixel", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Path Traced Samples"], "role": "item", "extent": [14742, 14765], "body": [{"type": "para", "indent": 4, "text": ["The number of ray-samples sent through each pixel when using the path\n    traced convergence mode.  More samples will result in a less noisy image."], "extent": [14832, 14985]}], "container": true, "attrs": {"hprop": "karma:global:pathtracedsamples", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Image Blur"], "role": "item", "extent": [14985, 14999], "body": [{"type": "para", "indent": 4, "text": ["If you turn this off, Karma still calculates velocities (and the velocities\n    can be stored in an AOV), but it sends all camera rays at shutter open, so\n    the image will not have any apparent motion blur. This may be useful if you\n    simply don\u2019t want any motion blur to create a certain visual effect."], "extent": [15059, 15372]}], "container": true, "attrs": {"hprop": "karma:global:image_blur", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Screendoor Limit"], "role": "item", "extent": [15372, 15392], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/sampling/VolumeSamplingStochastic.jpg", "type": "img", "text": ""}], "role": "item", "extent": [15457, 15532]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["The number of transparent samples to be shaded as a ray travels through\n    partially opaque objects. Increasing this value will result in less noise\n    in partially opaque objects and is generally less costly than increasing\n    Pixel samples, Volume Step Rate, or Min and Max ray samples. This parameter\n    will not have any effect on noise from Indirect Sources however."], "extent": [15532, 15913]}], "container": true, "attrs": {"hprop": "karma:global:screendoorlimit", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Light Sampling Mode"], "role": "item", "extent": [15913, 15936], "body": [{"type": "para", "indent": 4, "text": ["Whether Karma should perform uniform sampling of lights or whether\n    rendering should use the light tree. The light tree can be significantly\n    faster for scenes that have large numbers of lights."], "extent": [16005, 16211]}, {"type": "para", "indent": 4, "text": ["Some lights cannot be added to the light tree, and will all be sampled by Karma:"], "extent": [16211, 16297]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["Dome Lights"], "extent": [16297, 16315]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Distant Lights"], "extent": [16315, 16336]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Point Lights"], "extent": [16336, 16355]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Lights with Light Filters"], "extent": [16355, 16387]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Lights with shaping controls (i.e. spot lights)"], "extent": [16387, 16442]}], "container": true}], "container": true, "attrs": {"hprop": "karma:global:light_sampling_mode", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Light Sampling Quality"], "role": "item", "extent": [16442, 16468], "body": [{"type": "para", "indent": 4, "text": ["This is a global control to improve sampling quality for all lights. This\n    acts as a multiplier on the individual light quality controls.  Increasing\n    the quality will improve direct light sampling as well as\n    shadows/occlusion."], "extent": [16540, 16783]}], "container": true, "attrs": {"hprop": "karma:global:light_sampling_quality", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Bucket Size"], "role": "item", "extent": [16783, 16798], "body": [{"type": "para", "indent": 4, "text": ["Karma breaks down an image into multiple buckets for rendering. This is the side length (in pixels) of the square bucket. The default is 32, specifying a 32 pixel x 32 pixel bucket. Threads operate at the bucket level, so it might be useful to lower the bucket size if there are only a few buckets that are particularly expensive. That way the expensive areas can be divided across more threads."], "extent": [16859, 17260]}, {"type": "para", "indent": 4, "text": ["For example, if the image is mostly empty, but there\u2019s a distant object that fits within single 32 x 32 bucket, then that object will only be rendered using 1 thread. If you switch to a 16 x 16 bucket, then the object might be split across 4 buckets and have 4 threads working on it."], "extent": [17260, 17549]}, {"type": "para", "indent": 4, "text": ["Ideally changing the bucket size doesn\u2019t change the results, but Karma measures variance across pixels within the current bucket, so if you set it to a low value, for example 4, Karma only has ", {"type": "code", "text": ["4 x 4 = 16"]}, " pixels to look at, so Karma will tend to make very poor variance estimates. This can show up as black pixels, where pixel rendering terminated prematurely due to a bad variance estimate."], "extent": [17549, 17947]}], "container": true, "attrs": {"hprop": "karma:global:bucketsize", "kagroup": "Rendering"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Bucket Order"], "role": "item", "extent": [17947, 17963], "body": [{"type": "para", "indent": 4, "text": ["Specifies which buckets are rendered first. Values can be:"], "extent": [18025, 18089]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["middle"]}], "extent": [18089, 18103], "body": [{"type": "para", "indent": 8, "text": ["Buckets start from the middle of the image."], "extent": [18103, 18155]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["top"]}], "extent": [18155, 18166], "body": [{"type": "para", "indent": 8, "text": ["Buckets at the top of the image are rendered first."], "extent": [18166, 18226]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["bottom"]}], "extent": [18226, 18240], "body": [{"type": "para", "indent": 8, "text": ["Buckets at the bottom of the image are rendered first."], "extent": [18240, 18303]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["left"]}], "extent": [18303, 18315], "body": [{"type": "para", "indent": 8, "text": ["Buckets at the left side of the image are rendered first."], "extent": [18315, 18381]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["right"]}], "extent": [18381, 18394], "body": [{"type": "para", "indent": 8, "text": ["Buckets at the right side of the image are rendered first."], "extent": [18394, 18462]}], "container": true}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [18462, 18472], "body": [{"type": "para", "indent": 8, "text": ["When rendering to ", {"scheme": null, "value": "/mplay/index", "type": "link", "text": ["Mplay"], "fullpath": "/mplay/index.html"}, ", the user can click to focus on an area to render. Click to focus is not available with ", {"type": "ui", "text": ["Enable Indirect Guiding"]}, " turned on."], "extent": [18472, 18647]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"hprop": "karma:global:bucketorder", "kagroup": "Rendering"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Image Mode"], "role": "item", "extent": [18647, 18661], "body": [{"type": "para", "indent": 4, "text": ["Determines how the image will be rendered."], "extent": [18721, 18773]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["progressive"]}], "extent": [18773, 18792], "body": [{"type": "para", "indent": 8, "text": ["The entire image will be progressively rendered, so the whole image resolves at the same time.  This mode gives you a sense of what the whole image will look like without waiting for the render to complete."], "extent": [18792, 19007]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["bucket"]}], "extent": [19007, 19021], "body": [{"type": "para", "indent": 8, "text": ["Each bucket renders to completion before advancing to the next bucket.  This mode  lets you see what the final quality will be like without waiting for the whole image to render. This mode isn\u2019t available with ", {"type": "ui", "text": ["Enable Indirect Guiding"]}, " turned on."], "extent": [19021, 19279]}], "container": true}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [19279, 19289], "body": [{"type": "para", "indent": 8, "text": ["When rendering for IPR, Karma will use progressive rendering until the IPR preview passes are complete."], "extent": [19289, 19402]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"hprop": "karma:global:imagemode", "kagroup": "Rendering"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Progressive Passes"], "role": "item", "extent": [19402, 19424], "body": [{"type": "para", "indent": 4, "text": ["When rendering in bucket mode (see ", {"type": "code", "text": ["imagemode"]}, "), this is the number of progressive passes over the image to perform before switching to bucket mode."], "extent": [19492, 19646]}], "container": true, "attrs": {"hprop": "karma:global:progressivepasses", "kagroup": "Rendering"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Dicing Quality Scale"], "role": "item", "extent": [19646, 19670], "body": [{"type": "para", "indent": 4, "text": ["This parameter is a global multiplier for dicing quality of all objects."], "extent": [19736, 19814]}], "container": true, "attrs": {"hprop": "karma:global:dicingqualityscale", "kagroup": "Dicing"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["IPR Continuous Dicing"], "role": "item", "extent": [19814, 19839], "body": [{"type": "para", "indent": 4, "text": ["When rendering in IPR mode, this setting controls whether Karma will\n    re-dice displacements and sub-division surface when the view transform\n    changes.  Continuous re-dicing of geometry can add significant time to\n    start-up time for the render, but will provide more accurate results."], "extent": [19908, 20206]}], "container": true, "attrs": {"hprop": "karma:global:ipr_continuous_dicing", "kagroup": "Dicing"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Offscreen Quality"], "role": "item", "extent": [20206, 20227], "body": [{"type": "para", "indent": 4, "text": ["This parameter controls the shading quality scale factor for geometry that\n    is not directly visible to the camera. For geometry that is outside the\n    field of view (i.e. visible only to secondary rays), karma will smoothly\n    reduce the shading quality based on the angle between the geometry and the\n    edge of the viewing frustum.  Smaller values can increase performance\n    particularly in scenes where the camera is within the displacement bound of\n    nearby geometry, where it permits the hidden primitives to be diced more\n    coarsely than those that are directly visible."], "extent": [20291, 20885]}], "container": true, "attrs": {"hprop": "karma:global:offscreenquality", "kagroup": "Dicing"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Color Limit"], "role": "item", "extent": [20885, 20900], "body": [{"type": "para", "indent": 4, "text": ["The maximum value a shading sample is allowed to contribute to an LPE image\n    plane to reduce appearance of ", {"type": "q", "text": ["fireflies"]}, " caused by undersampling of \n    extremely bright light sources. Note that reducing this value can result in\n    an overall reduction in the amount of light in your scene."], "extent": [20959, 21257]}], "container": true, "attrs": {"hprop": "karma:global:colorlimit", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Indirect Color Limit"], "role": "item", "extent": [21257, 21281], "body": [{"type": "para", "indent": 4, "text": ["Color limit applied to indirect bounce only. Note that this parameter is\n    ignored unless ", {"type": "ui", "text": ["Shared Color Limit"]}, " is turned off."], "extent": [21348, 21483]}], "container": true, "attrs": {"hprop": "karma:global:colorlimitindirect", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Shared Color Limit"], "role": "item", "extent": [21483, 21505], "body": [{"type": "para", "indent": 4, "text": ["When turned on, indirect bounces use ", {"type": "ui", "text": ["Color Limit"]}, " value and ", {"type": "ui", "text": ["Indirect Color\n    Limit"]}, " parameter is ignored."], "extent": [21573, 21692]}], "container": true, "attrs": {"hprop": "karma:global:colorlimitindlinked", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Enable Indirect Guiding"], "role": "item", "extent": [21692, 21719], "body": [{"type": "para", "indent": 4, "text": ["When turned on, Karma does a pre-render to roughly estimate of the light in the scene, and uses that to guide indirect diffuse rays, rather than just relying on the BSDF sampling distribution. This can improve ", {"type": "q", "text": ["difficult"]}, " lighting (for example, caustics, and mostly indirect lighting), but can make ", {"type": "q", "text": ["easy"]}, " lighting noisier. Before using this, you can try rendering direct and indirect AOVs to see where the noise is. If the noise is mostly caused by the direct lighting, there\u2019s no point in turning on path guiding."], "extent": [21791, 22312]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [22312, 22322], "body": [{"type": "para", "indent": 8, "text": ["When rendering to ", {"scheme": null, "value": "/mplay/index", "type": "link", "text": ["Mplay"], "fullpath": "/mplay/index.html"}, ", the user can click to focus on an area to render. Click to focus is not available with ", {"type": "ui", "text": ["Enable Indirect Guiding"]}, " turned on."], "extent": [22322, 22497]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"hprop": "karma:global:guiding_enable", "kagroup": "Indirect Guiding"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Indirect Training Samples"], "role": "item", "extent": [22497, 22526], "body": [{"type": "para", "indent": 4, "text": ["Number of pixel samples to use for prepass render when Indirect Guiding is\n    turned on. Recommended minimum is 10% of pixel samples under Path Traced\n    convergence mode, or the same number of pixel samples under Automatic\n    convergence mode. Grid-like artifacts can show up in the final render when\n    this value is too low and not enough data is collected. It\u2019s recommended to\n    keep this value above 64."], "extent": [22599, 23019]}], "container": true, "attrs": {"hprop": "karma:global:guiding_samples", "kagroup": "Indirect Guiding"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Indirect Guiding Spatial Filter"], "role": "item", "extent": [23019, 23054], "body": [{"type": "para", "indent": 4, "text": ["Applies blur to spatial component of path guiding samples while training.\n    Can be increased to reduce grid-like artifacts at the cost of efficiency."], "extent": [23133, 23290]}], "container": true, "attrs": {"hprop": "karma:global:guiding_spatialfilter", "kagroup": "Indirect Guiding"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Indirect Guiding Directional Filter"], "role": "item", "extent": [23290, 23329], "body": [{"type": "para", "indent": 4, "text": ["Applies blur to directional component of path guiding samples while\n    training. Can be increased to reduce grid-like artifacts at the cost of\n    efficiency."], "extent": [23412, 23577]}], "container": true, "attrs": {"hprop": "karma:global:guiding_directionalfilter", "kagroup": "Indirect Guiding"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Texture Baking Type"], "role": "item", "extent": [23577, 23599], "body": [{"type": "para", "indent": 4, "text": ["Type of texture baking to do. Can choose between UDIM and PTex texture\n    baking."], "extent": [23668, 23756]}], "container": true, "attrs": {"hprop": "karma:global:uvunwrap_type", "kagroup": "Texture Baking"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Texture Baking Object ID"], "role": "item", "extent": [23756, 23784], "body": [{"type": "para", "indent": 4, "text": ["Object ID for the object that will be unwrapped for texture baking. Texture\n    baking will look for the objects in the scene that have the corresponding\n    object ID per type (low resolution, cage and high resolution) and assigns\n    them accordingly. There should only be one object per type "], "extent": [23858, 24159]}], "container": true, "attrs": {"hprop": "karma:global:uvunwrap_object_id", "kagroup": "Texture Baking"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Texture Baking Tile"], "role": "item", "extent": [24159, 24182], "body": [{"type": "para", "indent": 4, "text": ["Tile number that this scene will be texture baking. For UDIM texture baking\n    this is the UDIM index (between 1001 and 9999). For PTEX texture baking,\n    faces are laid out onto paginated grids ordered from largest to smallest\n    area. The tile number refers to which page is being baked currently."], "extent": [24259, 24567]}], "container": true, "attrs": {"hprop": "karma:global:uvunwrap_texture_tile", "kagroup": "Texture Baking"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Texture Baking PTex Minimum Resolution"], "role": "item", "extent": [24567, 24608], "body": [{"type": "para", "indent": 4, "text": ["Minimum resolution of a single PTex face when doing PTex texture baking."], "extent": [24685, 24763]}], "container": true, "attrs": {"hprop": "karma:global:uvunwrap_ptex_min_res", "kagroup": "Texture Baking"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Texture Baking PTex Maximum Resolution"], "role": "item", "extent": [24763, 24804], "body": [{"type": "para", "indent": 4, "text": ["Maximum resolution of a single PTex face when doing PTex texture baking."], "extent": [24881, 24959]}], "container": true, "attrs": {"hprop": "karma:global:uvunwrap_ptex_max_res", "kagroup": "Texture Baking"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Texture Baking PTex Small Face Percent"], "role": "item", "extent": [24959, 25000], "body": [{"type": "para", "indent": 4, "text": ["Used with PTex relative scaling. Refers to how many quads should\n    approximately have resolutions less than the minimum resolution in relative\n    scaling. This value is only an estimate based on the approximate\n    lengths/widths of each face."], "extent": [25079, 25331]}], "container": true, "attrs": {"hprop": "karma:global:uvunwrap_ptex_small_pct", "kagroup": "Texture Baking"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Texture Baking PTex Relative Scaling"], "role": "item", "extent": [25331, 25370], "body": [{"type": "para", "indent": 4, "text": ["Used to enable relative scaling for PTex. Relative scaling attempts to\n    adjust the resolution of the PTex faces rendered based on the size of the\n    meshes and the Texture Baking Small Face Percent. Relative scaling will\n    adjust the minimum resolution so that a percent of the faces have less\n    resolution than this minimum. This percent is the Texture Baking Small Face\n    Percent"], "extent": [25449, 25846]}], "container": true, "attrs": {"hprop": "karma:global:uvunwrap_ptex_rel_scale", "kagroup": "Texture Baking"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Texture Baking PTex Scale"], "role": "item", "extent": [25846, 25874], "body": [{"type": "para", "indent": 4, "text": ["Used to adjust the scaling of PTex face resolutions when doing PTex baking."], "extent": [25949, 26030]}], "container": true, "attrs": {"hprop": "karma:global:uvunwrap_ptex_scale", "kagroup": "Texture Baking"}}], "container": true, "role": "item_group"}]}, {"level": 2, "id": "camera", "container": true, "type": "h", "indent": 0, "text": ["Camera Properties"], "extent": [26030, 26063], "body": [{"type": "properties_item_group", "body": [{"ext": null, "type": "properties_item", "indent": 0, "text": ["Focal Length"], "role": "item", "extent": [26063, 26080], "body": [{"type": "para", "indent": 4, "text": ["Camera focal length (zoom)."], "extent": [26131, 26164]}], "container": true, "attrs": {"hprop": "karma:camera:focal", "kagroup": "View"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Aperture"], "role": "item", "extent": [26164, 26176], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/nodes/fov.png", "type": "img", "text": ""}], "role": "item", "extent": [26230, 26271], "body": [{"type": "para", "indent": 8, "text": ["Width of the visible field."], "extent": [26271, 26308]}, {"type": "note_group", "body": [{"type": "note", "indent": 8, "role": "item", "extent": [26308, 26322], "body": [{"type": "para", "indent": 12, "text": ["The correct aperture width for Super 35 mm format motion picture film is 24.89."], "extent": [26322, 26415]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"hprop": "karma:camera:aperture", "kagroup": "View"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Orthographic"], "role": "item", "extent": [26415, 26431], "body": [{"type": "para", "indent": 4, "text": ["Whether the camera has a perspective or orthographic projection."], "extent": [26489, 26559]}], "container": true, "attrs": {"hprop": "karma:camera:orthographic", "kagroup": "View"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Orthographic Width"], "role": "item", "extent": [26559, 26581], "body": [{"type": "para", "indent": 4, "text": ["The width of the orthographic projection."], "extent": [26637, 26684]}], "container": true, "attrs": {"hprop": "karma:camera:orthowidth", "kagroup": "View"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Projection"], "role": "item", "extent": [26684, 26698], "body": [{"type": "para", "indent": 4, "text": ["The type of projection mode, either perspective, orthographic, or custom CVEX lens shader."], "extent": [26754, 26850]}], "container": true, "attrs": {"hprop": "karma:camera:projection", "kagroup": "View"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Lens Shader VOP"], "role": "item", "extent": [26850, 26869], "body": [{"type": "para", "indent": 4, "text": ["Path to Lens Shader VOP."], "extent": [26928, 26958]}], "container": true, "attrs": {"hprop": "karma:camera:lensshadervop", "kagroup": "View"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Lens Shader"], "role": "item", "extent": [26958, 26973], "body": [{"type": "para", "indent": 4, "text": ["Shader and arguments for the lens shader."], "extent": [27029, 27076]}], "container": true, "attrs": {"hprop": "karma:camera:lensshader", "kagroup": "View"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Use Lens Shader"], "role": "item", "extent": [27076, 27095], "body": [{"type": "para", "indent": 4, "text": ["Toggle to override USD projection modes and use given CVEX lens shader."], "extent": [27155, 27232]}], "container": true, "attrs": {"hprop": "karma:camera:use_lensshader", "kagroup": "View"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Exposure"], "role": "item", "extent": [27232, 27244], "body": [{"type": "para", "indent": 4, "text": ["USD represents the camera exposure as a logarithmic base-2 adjustment.  So,\n    in USD, a value of 0.0 has no effect, while a value of 1.0 will double\n    image-plane intensities and a value of -1.0 will halve them."], "extent": [27298, 27519]}], "container": true, "attrs": {"hprop": "karma:camera:exposure", "kagroup": "View"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Tint"], "role": "item", "extent": [27519, 27527], "body": [{"type": "para", "indent": 4, "text": ["In addition to exposure, the tint can adjust the color of the primary rays\n    from the camera."], "extent": [27577, 27678]}], "container": true, "attrs": {"hprop": "karma:camera:tint", "kagroup": "View"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["clip"], "role": "item", "extent": [27678, 27686], "body": [{"type": "para", "indent": 4, "text": ["Position of near and far clipping planes."], "extent": [27736, 27783]}], "container": true, "attrs": {"hprop": "karma:camera:clip", "kagroup": "View"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["shutter"], "role": "item", "extent": [27783, 27794], "body": [{"type": "para", "indent": 4, "text": ["The shutter time refers to the portion of a frame the shutter is actually open. On a physical camera, this if often referred to as Shutter Speed. The renderer uses this determine motion blur. The value should be in the range ", {"type": "code", "text": ["[0,1]"]}, "."], "extent": [27851, 28090]}, {"type": "para", "indent": 4, "text": ["A value of 0 for the shutter time would mean that there is no motion blur at all, as the shutter is only ", {"type": "q", "text": ["Open"]}, " for an instant. A value of 1 on the other hand would mean that the shutter is open for the entire length of the frame."], "extent": [28090, 28326]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/blur/ShutterTime.jpg", "type": "img", "text": ""}], "role": "item", "extent": [28326, 28384]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["In the above example the sphere is rotating a full 360 degrees over the course of a single frame. You can see how the length of the ", {"type": "q", "text": ["motion trail"]}, " or ", {"type": "q", "text": ["blur"]}, " changes based on the shutter time. In most cases, the default value of .5 is appropriate for animated sequences and a good match for real world settings."], "extent": [28384, 28700]}, {"type": "para", "indent": 4, "text": ["Keep in mind that this parameter controls the amount of time within a single frame, that the shutter is open. It does not refer to how long an individual frame is. To adjust the frame rate, change the Frames per Second parameter in the Global Animation Options."], "extent": [28700, 28967]}], "container": true, "attrs": {"hprop": "karma:camera:shutter", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["focusdistance"], "role": "item", "extent": [28967, 28984], "body": [{"type": "para", "indent": 4, "text": ["The lens focal distance and distance from the camera at\n    which objects will be in focus. This is only used when rendering using\n    depth of field. Objects outside this distance will be blurred."], "extent": [29043, 29246]}], "container": true, "attrs": {"hprop": "karma:camera:focusdistance", "kagroup": "View"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["fstop"], "role": "item", "extent": [29246, 29255], "body": [{"type": "para", "indent": 4, "text": ["Lens fstop. This is only used when rendering using depth of field.\n    Determines blurriness of depth of field effects."], "extent": [29306, 29431]}], "container": true, "attrs": {"hprop": "karma:camera:fstop", "kagroup": "View"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Screen Window"], "role": "item", "extent": [29431, 29448], "body": [{"type": "para", "indent": 4, "text": ["The Screen Window specifies a window on the image projection.  There are 4\n    values specifying the (xmin, xmax, ymin, ymax) values in NDC space of the\n    image plane.  This window is mapped to the full image.  This provides the\n    ability to do 2D pan and zoom on the screen projection."], "extent": [29500, 29797]}], "container": true, "attrs": {"hprop": "karma:camera:window", "kagroup": "View"}}], "container": true, "role": "item_group"}]}, {"level": 2, "id": "light", "container": true, "type": "h", "indent": 0, "text": ["Light Properties"], "extent": [29797, 29828], "body": [{"type": "properties_item_group", "body": [{"ext": null, "type": "properties_item", "indent": 0, "text": ["Light Shader"], "role": "item", "extent": [29828, 29845], "body": [{"type": "para", "indent": 4, "text": ["Defines a VEX shader to be used for light evaluation.  If the string is\n    empty, the value will be taken from the HOUDINI_VEX_DEFAULT_LIGHTSURFACE\n    configuration variable."], "extent": [29897, 30079]}], "container": true, "attrs": {"hprop": "karma:light:shader", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Area Shape"], "role": "item", "extent": [30079, 30093], "body": [{"type": "para", "indent": 4, "text": ["The shape of the area light source."], "extent": [30148, 30189]}], "container": true, "attrs": {"hprop": "karma:light:areashape", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Normalize Area"], "role": "item", "extent": [30189, 30207], "body": [{"type": "para", "indent": 4, "text": ["Whether the light intensity should be normalized based on the size of the\n    area light."], "extent": [30266, 30361]}], "container": true, "attrs": {"hprop": "karma:light:normalizearea", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Area Size"], "role": "item", "extent": [30361, 30374], "body": [{"type": "para", "indent": 4, "text": ["The dimensions of the area light.  This has different meaning depending on\n    the light type:"], "extent": [30428, 30528]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Sphere Light"], "extent": [30528, 30546], "body": [{"type": "para", "indent": 11, "text": ["The first value specifies the radius of the light.  The second value is ignored."], "extent": [30546, 30639]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Rectangular Light"], "extent": [30639, 30662], "body": [{"type": "para", "indent": 11, "text": ["The first value specifies the width, the second specifies the height."], "extent": [30662, 30744]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Disk Light"], "extent": [30744, 30759], "body": [{"type": "para", "indent": 11, "text": ["The first value specifies the radius of the light.  The second value is ignored."], "extent": [30759, 30852]}], "container": true}, {"type": "para", "indent": 4, "text": ["Cylinder Light"], "extent": [30852, 30871], "body": [{"type": "para", "indent": 11, "text": ["The first value specifies the height of the cylinder.  The second value the radius."], "extent": [30871, 30967]}], "container": true}, {"type": "para", "indent": 4, "text": ["Line Light"], "extent": [30967, 30982], "body": [{"type": "para", "indent": 11, "text": ["The first value is the length of the line.  The second value is ignored"], "extent": [30982, 31066]}], "container": true}], "container": true, "attrs": {"hprop": "karma:light:areasize", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Single Sided"], "role": "item", "extent": [31066, 31082], "body": [{"type": "para", "indent": 4, "text": ["Does the light emit light from a single side (ie along the normal) or from both "], "extent": [31139, 31224], "body": [{"type": "para", "indent": 8, "text": ["sides?  This only has effect on planar area light types."], "extent": [31224, 31290]}], "container": true}], "container": true, "attrs": {"hprop": "karma:light:singlesided", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Distant Angle"], "role": "item", "extent": [31290, 31307], "body": [{"type": "para", "indent": 4, "text": ["For distant lights, this is the size of the light in degrees.  The larger the angle, the softer the shadows.  As an example, the sun is approximately 0.53 degrees when seen from the earth."], "extent": [31366, 31560]}], "container": true, "attrs": {"hprop": "karma:light:distant_angle", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Render Light Geometry"], "role": "item", "extent": [31560, 31585], "body": [{"type": "para", "indent": 4, "text": ["Causes the light source geometry to be visible in the render."], "extent": [31645, 31712]}], "container": true, "attrs": {"hprop": "karma:light:renderlightgeo", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Light Geometry Casts Shadow"], "role": "item", "extent": [31712, 31743], "body": [{"type": "para", "indent": 4, "text": ["Causes the light source geometry to cast shadows in the render."], "extent": [31808, 31877]}], "container": true, "attrs": {"hprop": "karma:light:lightgeocastsshadow", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Attenuation Type"], "role": "item", "extent": [31877, 31897], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Controls the type of attenuation on the light source in the default light\n    shader.  This may be:\n    ", {"type": "code", "text": ["none"]}], "extent": [31952, 32068], "body": [{"type": "para", "indent": 8, "text": ["No attenuation"], "extent": [32068, 32091]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["half"]}], "extent": [32091, 32103], "body": [{"type": "para", "indent": 8, "text": ["Half distance attenuation"], "extent": [32103, 32137]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["physical"]}], "extent": [32137, 32153], "body": [{"type": "para", "indent": 8, "text": ["Physically correct attenuation"], "extent": [32153, 32193]}], "container": true}], "container": true}], "container": true, "attrs": {"hprop": "karma:light:attentype", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Attenuation Start"], "role": "item", "extent": [32193, 32214], "body": [{"type": "para", "indent": 4, "text": ["Minimum light distance to be used for attenuation."], "extent": [32270, 32326]}], "container": true, "attrs": {"hprop": "karma:light:attenstart", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Attenuation"], "role": "item", "extent": [32326, 32341], "body": [{"type": "para", "indent": 4, "text": ["The distance from the light at which ", {"type": "ui", "text": ["Half Distance Attenuation"]}, " produces\n    half the light intensity."], "extent": [32392, 32503]}], "container": true, "attrs": {"hprop": "karma:light:atten", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Point Light Radius"], "role": "item", "extent": [32503, 32525], "body": [{"type": "para", "indent": 4, "text": ["As point lights get closer to geometry, the attenuation equation causes the\n    intensity of lights to go to infinity (a singularity caused by the division\n    by the distance between the light and the surface).  Increasing this value\n    to something larger than zero creates an artificial buffer zone to prevent\n    the light from going to infinity.  If the radius is set to 1, the brightest\n    value for the point light will be twice the intensity specified on the\n    light.  If the value is ", {"type": "code", "text": ["1.4142"]}, " (", {"type": "code", "text": ["sqrt(2)"]}, "), the brightest value will be the\n    intensity specified."], "extent": [32582, 33163]}, {"type": "para", "indent": 4, "text": ["For distant geometry, there should be very little change in the intensity."], "extent": [33163, 33243]}], "container": true, "attrs": {"hprop": "karma:light:pointradius", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Active Radius"], "role": "item", "extent": [33243, 33260], "body": [{"type": "para", "indent": 4, "text": ["Artificially clamp the illumination distance from the light. Outside this radius,\n    the light will have no effect."], "extent": [33318, 33440]}], "container": true, "attrs": {"hprop": "karma:light:activeradius", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Area Map"], "role": "item", "extent": [33440, 33452], "body": [{"type": "para", "indent": 4, "text": ["Specifies the environment map to use for area lights."], "extent": [33507, 33566]}], "container": true, "attrs": {"hprop": "karma:light:areamap", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Shadow Color"], "role": "item", "extent": [33566, 33582], "body": [{"type": "para", "indent": 4, "text": ["The color of shadows for the light.  This defaults to black.  Setting the\n    color to white (1,1,1), means the light will not cast shadows."], "extent": [33640, 33786]}], "container": true, "attrs": {"hprop": "karma:light:shadowcolor", "kagroup": "Shadow"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Shadow Distance"], "role": "item", "extent": [33786, 33805], "body": [{"type": "para", "indent": 4, "text": ["This value can be used to limit shadow tests to a specific distance.  For\n    example, with a dome light, setting the shadow distance to a smaller value\n    will limit shadow tests to only nearby objects."], "extent": [33866, 34076]}], "container": true, "attrs": {"hprop": "karma:light:shadowdistance", "kagroup": "Shadow"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["MIS Bias"], "role": "item", "extent": [34076, 34088], "body": [{"type": "para", "indent": 4, "text": ["Controls whether multiple importance sampling will sample from the BSDF,\n    the light, or both the BSDF and light."], "extent": [34144, 34265]}], "container": true, "attrs": {"hprop": "karma:light:misbias", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Sampling Quality"], "role": "item", "extent": [34265, 34285], "body": [{"type": "para", "indent": 4, "text": ["This is the per-light sampling quality, that acts as a multiplier on the global ", {"type": "em", "text": ["Light Sampling Quality"]}, ". Increasing the quality will add\n    additional samples for this light source, improving the sampling quality\n    of this light relative to other light sources."], "extent": [34349, 34620]}], "container": true, "attrs": {"hprop": "karma:light:samplingquality", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Light Sampling Quality"], "role": "item", "extent": [34620, 34646], "body": [{"type": "para", "indent": 4, "text": ["When an object is used as a geometry light source, this sets the per-light\n    sampling quality.  Increasing the quality will add additional samples for\n    this light source, improving the sampling quality of this light relative to\n    other light sources."], "extent": [34723, 34986]}, {"type": "para", "indent": 4, "text": ["Note: This is not the quality of light received by an object."], "extent": [34986, 35061]}], "container": true, "attrs": {"hprop": "karma:object:lightsource_samplingquality", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Treat As Light Source"], "role": "item", "extent": [35061, 35086], "body": [{"type": "para", "indent": 4, "text": ["Any object with an emissive material will generate light within the\n    scene.  If an object is significant enough (e.g. size, brightness, etc\u2026)\n    then it is possible for Karma to treat that object as if it were an \n    explicit light source (similar to regular lights), meaning the emitted\n    light will be handled much more efficiently.  But doing so will add\n    extra overhead elsewhere in the system (e.g. increased memory usage, \n    slower update times, etc\u2026)."], "extent": [35161, 35645]}, {"type": "para", "indent": 4, "text": ["There are three options.  ", {"type": "q", "text": ["No"]}, " will set the object as not being\n    a light source.  ", {"type": "q", "text": ["Yes"]}, " will set the object as being a light source.  \n    ", {"type": "q", "text": ["Auto"]}, " (default) means Karma will use an internal heuristic \n    to decide if the object should be treated as a light source."], "extent": [35645, 35918]}], "container": true, "attrs": {"hprop": "karma:object:treat_as_lightsource", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Light Source Diffuse Multiplier"], "role": "item", "extent": [35918, 35953], "body": [{"type": "para", "indent": 4, "text": ["A multiplier for the effect of this emissive object on the diffuse, SSS,\n    and volume response of materials"], "extent": [36024, 36139]}], "container": true, "attrs": {"hprop": "karma:object:lightsource_diffusescale", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Light Source Specular Multiplier"], "role": "item", "extent": [36139, 36175], "body": [{"type": "para", "indent": 4, "text": ["A multiplier for the effect of this emissive object on the reflection and\n    refraction response of materials"], "extent": [36247, 36363]}], "container": true, "attrs": {"hprop": "karma:object:lightsource_specularscale", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Render Visibility"], "role": "item", "extent": [36363, 36384], "body": [{"type": "para", "indent": 4, "text": ["Controls the visibility of an object to different types of rays using a\n    category expression. This parameter generalizes the Phantom and Renderable\n    toggles and allows more specific control over the visibility of an object\n    to the different ray types supported by karma and VEX."], "extent": [36449, 36742]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["primary"]}], "extent": [36742, 36757], "body": [{"type": "para", "indent": 8, "text": ["Rays sent from the camera"], "extent": [36757, 36791]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["shadow"]}], "extent": [36791, 36805], "body": [{"type": "para", "indent": 8, "text": ["Shadow rays"], "extent": [36805, 36825]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["diffuse"]}], "extent": [36825, 36840], "body": [{"type": "para", "indent": 8, "text": ["Diffuse rays"], "extent": [36840, 36861]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["reflect"]}], "extent": [36861, 36876], "body": [{"type": "para", "indent": 8, "text": ["Reflections"], "extent": [36876, 36896]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["refract"]}], "extent": [36896, 36911], "body": [{"type": "para", "indent": 8, "text": ["Refractions"], "extent": [36911, 36932]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["For example, to create a phantom object, set the expression to ", {"type": "q", "text": ["-primary"]}, ".\n    To create a not renderable object, set the expression to the empty string\n    ", {"type": "q", "text": []}, ". These tokens correspond to the string given to ", {"type": "q", "text": ["raystyle"]}, " in the VEX\n    trace() and gather() functions."], "extent": [36932, 37203]}], "container": true, "attrs": {"hprop": "karma:object:rendervisibility", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Sampling Mode"], "role": "item", "extent": [37203, 37220], "body": [{"type": "para", "indent": 4, "text": ["When using the light tree for rendering, Karma will try to put any light\n    source that\u2019s compatible into the tree.  This option can force a light to\n    be excluded from the tree and subject to uniform sampling, which can \n    sometimes yield an improved sampling quality the light at the expense\n    of speed."], "extent": [37281, 37599]}], "container": true, "attrs": {"hprop": "karma:light:samplingmode", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Shadow Trace Set"], "role": "item", "extent": [37599, 37619], "body": [{"type": "para", "indent": 4, "text": ["The trace-set of geometry which act as occluders for this light source."], "extent": [37681, 37758]}], "container": true, "attrs": {"hprop": "karma:light:shadowtraceset", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Category"], "role": "item", "extent": [37758, 37770], "body": [{"type": "para", "indent": 4, "text": ["The category identifier used to select this light source for illumination."], "extent": [37826, 37906]}], "container": true, "attrs": {"hprop": "karma:light:category", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Maximum HDRI Size"], "role": "item", "extent": [37906, 37927], "body": [{"type": "para", "indent": 4, "text": ["If an environment map is larger than this resolution, it will be scaled\n    down when performing texture analysis.  If the map has some very small,\n    very bright values, this filtering may affect how sampling of the\n    environment map is performed."], "extent": [37990, 38247]}], "container": true, "attrs": {"hprop": "karma:light:hdri_max_isize", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Diffuse Scale"], "role": "item", "extent": [38247, 38264], "body": [{"type": "para", "indent": 4, "text": ["A multiplier for the effect of this light on the diffuse, SSS, and volume\n    response of materials"], "extent": [38324, 38429]}], "container": true, "attrs": {"hprop": "karma:light:diffusescale", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Specular Scale"], "role": "item", "extent": [38429, 38447], "body": [{"type": "para", "indent": 4, "text": ["A multiplier for the effect of this light on the reflection and refraction\n    response of materials"], "extent": [38506, 38612]}], "container": true, "attrs": {"hprop": "karma:light:specularscale", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["LPE Tag"], "role": "item", "extent": [38612, 38623], "body": [{"type": "para", "indent": 4, "text": ["Custom label assigned to lights or objects for use with ", {"scheme": null, "value": "/render/lpe", "type": "link", "text": ["light path expression"], "fullpath": "/render/lpe.html"}, "."], "extent": [38675, 38773]}], "container": true, "attrs": {"hprop": "karma:light:lpetag", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Portal MIS Bias"], "role": "item", "extent": [38773, 38792], "body": [{"type": "para", "indent": 4, "text": ["Controls whether the dome light is more likely to sample from the\n    environment map or the portal geometry. For high-contrast HDRI with strong\n    light sources, it may be beneficial to sample more from the environment map\n    (set it less than 0), and for low-contrast/flat HDRI, the opposite may be\n    true (set it greater than 0). Leave it at 0 for balanced approach."], "extent": [38854, 39233]}], "container": true, "attrs": {"hprop": "karma:light:portalmisbias", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Illuminate Background Holdout"], "role": "item", "extent": [39233, 39266], "body": [{"type": "para", "indent": 4, "text": ["If a light exists to add new light source instead of trying to replicate\n    lighting in the live action plate, turn on this parameter so that its effect\n    on background holdout geometry shows up in indirect bounces and its\n    contribution to shadow holdout AOVs is omitted."], "extent": [39327, 39610]}], "container": true, "attrs": {"hprop": "karma:light:illumbackground", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Contributions"], "role": "item", "extent": [39610, 39627], "body": [{"type": "para", "indent": 4, "text": ["Provides detailed control over which BSDF component the light affects."], "extent": [39681, 39757]}], "container": true, "attrs": {"hprop": "karma:light:contribs", "kagroup": "Light"}}], "container": true, "role": "item_group"}]}, {"level": 2, "id": "object", "container": true, "type": "h", "indent": 0, "text": ["Object Properties"], "extent": [39757, 39790], "body": [{"type": "properties_item_group", "body": [{"ext": null, "type": "properties_item", "indent": 0, "text": ["Enable Motion Blur"], "role": "item", "extent": [39790, 39813], "body": [{"type": "para", "indent": 4, "text": ["Whether to turn on motion blur. Changing this in the display options will\n    require a restart of the render."], "extent": [39871, 39987]}], "container": true, "attrs": {"hprop": "karma:object:mblur", "kagroup": "Motion Blur"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Motion Samples From Stage"], "role": "item", "extent": [39987, 40016], "body": [{"type": "para", "indent": 4, "text": ["Instead of choosing the motion samples explicitly, Karma can also choose\n    the motion samples based on the samples authored on the USD stage.  This\n    option will choose just the right number of samples to capture the motion\n    described on the stage."], "extent": [40085, 40346]}, {"type": "para", "indent": 4, "text": ["This setting applies to both transform and deformation motion samples for\n    both geometry and instances."], "extent": [40346, 40458]}, {"type": "para", "indent": 4, "text": ["Note:  If the samples on the stage don\u2019t align with the shutter times on\n    the camera, it\u2019s possible there will be some minor interpolation issues\n    over the first and last segments (since motion will be truncated rather\n    than interpolated)."], "extent": [40458, 40712]}], "container": true, "attrs": {"hprop": "karma:object:samplesfromstage", "kagroup": "Motion Blur"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Velocity Blur"], "role": "item", "extent": [40712, 40729], "body": [{"type": "para", "indent": 4, "text": ["This parameter lets you choose what type of ", {"type": "em", "text": ["geometry velocity blur"]}, " to do on an object, if any. Separate from ", {"type": "em", "text": ["transform blur"]}, " and ", {"type": "em", "text": ["deformation blur"]}, ", you can render motion blur based on point movement, using attributes stored on the points that record change over time. You should use this type of blur if the number points in the geometry changes over time (for example, a particle simulation where points are born and die)."], "extent": [40787, 41220]}, {"type": "para", "indent": 4, "text": ["If your geometry changes topology frame-to-frame, Karma will not be able to interpolate the geometry to correctly calculate Motion Blur. In these cases, motion blur can use a ", {"type": "code", "text": ["velocities"]}, " and/or ", {"type": "code", "text": ["accelerations"]}, " attribute which is consistent even while the underlying geometry is changing. The surface of a fluid simulation is a good example of this. In this case, and other types of simulation data, the solvers will automatically create the velocity attribute."], "extent": [41220, 41687]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "text": [" "], "role": "item", "extent": [41687, 41698], "body": [{"type": "para", "indent": 8, "text": ["In Solaris, ", {"type": "code", "text": ["velocities"]}, ", ", {"type": "code", "text": ["accelerations"]}, ", and ", {"type": "code", "text": ["angularVelocities"]}, " attributes are equivalent to ", {"type": "code", "text": ["v"]}, ", ", {"type": "code", "text": ["accel"]}, ", and ", {"type": "code", "text": ["w"]}, " in SOPs, respectively."], "extent": [41698, 41848]}], "container": true}], "container": true, "role": "item_group"}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["No Velocity Blur"], "extent": [41848, 41870], "body": [{"type": "para", "indent": 8, "text": ["Do not render motion blur on this object, even if the renderer is set to allow motion blur."], "extent": [41870, 41971]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Velocity Blur"], "extent": [41971, 41990], "body": [{"type": "para", "indent": 8, "text": ["To use velocity blur, you must compute and store point velocities in a point attribute ", {"type": "code", "text": ["velocities"]}, ". The renderer uses this attribute, if it exists, to render velocity motion blur (assuming the renderer is set to allow motion blur). The ", {"type": "code", "text": ["velocities"]}, " attribute may be created automatically by simulation nodes (such as particle DOPs), or you can compute and add it using the ", {"scheme": "Node", "value": "/nodes/sop/pointvelocity", "type": "link", "text": ["Point velocity SOP"], "fullpath": "/nodes/sop/pointvelocity.html"}, "."], "extent": [41990, 42418]}, {"type": "para", "indent": 8, "text": ["The ", {"type": "code", "text": ["velocities"]}, " attribute value is measured in Houdini units per second."], "extent": [42418, 42501]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Acceleration Blur"], "extent": [42501, 42524], "body": [{"type": "para", "indent": 8, "text": ["To use acceleration blur, you must compute and store point acceleration in a point attribute ", {"type": "code", "text": ["accelerations"]}, ". The renderer uses this attribute, if it exists, to render multi-segment acceleration motion blur (assuming the renderer is set to allow motion blur). The ", {"type": "code", "text": ["accel"]}, " attribute may be created automatically by simulation nodes, or you can compute and add it using the ", {"scheme": "Node", "value": "/nodes/sop/pointvelocity", "type": "link", "text": ["Point velocity SOP"], "fullpath": "/nodes/sop/pointvelocity.html"}, "."], "extent": [42524, 42950]}, {"type": "para", "indent": 8, "text": ["When Acceleration Blur is on, if the geometry has a ", {"type": "em", "text": ["angular velocity"]}, " attribute (", {"type": "code", "text": ["w"]}, "), rapid rotation will also be blurred. This should be a vector attribute, where the components represent rotation speeds in radians per second around X, Y, and Z."], "extent": [42950, 43208]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["When this is set to ", {"type": "q", "text": ["Velocity Blur"]}, " or ", {"type": "q", "text": ["Acceleration Blur"]}, ", deformation blur is not applied to the object. When this is set to ", {"type": "q", "text": ["Acceleration Blur"]}, ", use the ", {"scheme": "Karma", "value": "karma:object:geosamples", "type": "link", "text": "", "exists": true}, " property to set the number of acceleration samples."], "extent": [43208, 43453]}, {"type": "col_group", "body": [{"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [43453, 43463], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/render/motionblur_velocity.jpg", "type": "img", "text": ""}], "role": "item", "extent": [43463, 43523], "body": [{"type": "summary", "indent": 12, "text": ["Velocity motion blur used the velocity attribute (", {"type": "code", "text": ["velocities"]}, ") to do linear motion blur."], "extent": [43523, 43631]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [43631, 43641], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/render/motionblur_acceleration.jpg", "type": "img", "text": ""}], "role": "item", "extent": [43641, 43705], "body": [{"type": "summary", "indent": 12, "text": ["Acceleration motion blur uses the change in velocity to more accurately blur objects turning at high speed."], "extent": [43705, 43831]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [43831, 43841], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/render/motionblur_angular_acceleration.jpg", "type": "img", "text": ""}], "role": "item", "extent": [43841, 43913], "body": [{"type": "summary", "indent": 12, "text": ["Angular acceleration blur works with object spin, such as these fast-spinning cubes."], "extent": [43913, 44017]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"hprop": "karma:object:vblur", "kagroup": "Motion Blur"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Geometry Time Samples"], "role": "item", "extent": [44017, 44042], "body": [{"type": "para", "indent": 4, "text": ["The number of sub-frame samples to compute when rendering ", {"type": "em", "text": ["deformation"]}, " motion blur over the shutter open time. The default is 1 (sample only at the start of the shutter time), giving ", {"type": "strong", "text": ["no"]}, " deformation blur by default. If you want rapidly deforming geometry to blur properly, you must increase this value to 2 or more. Note that this value is limited by the number of sub-samples available in the USD file being rendered.  An exception to this is the USD Skel deformer which allows."], "extent": [44105, 44592]}, {"type": "para", "indent": 4, "text": [{"type": "q", "text": ["Deformation"]}, " may refer to simple transformations at the Geometry (SOP) level, or actual surface deformation, such as a character or object which changes shape rapidly over the course of a frame."], "extent": [44592, 44793]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/blur/GeoTimeSamplesSimple.jpg", "type": "img", "text": ""}], "role": "item", "extent": [44793, 44860]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Objects whose deformations are quite complex within a single frame will require a higher number of Geo Time Samples."], "extent": [44860, 44982]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/blur/GeoTimeSamples.jpg", "type": "img", "text": ""}], "role": "item", "extent": [44982, 45043]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Deformation blur also lets you blur ", {"type": "em", "text": ["attribute change"]}, " over the shutter time. For example, if point colors are changing rapidly as the object moves, you can blur the ", {"type": "code", "text": ["Cd"]}, " attribute."], "extent": [45043, 45230]}, {"type": "para", "indent": 4, "text": ["Increasing the number of Geo Time Samples ", {"type": "strong", "text": ["can have an impact"]}, " on the amount of memory Karma uses.  For each additional Sample, Karma must retain a copy of the geometry in memory while it samples across the shutter time. When optimizing your renders, it is a good idea to find the minimum number of Geo Time Samples necessary to create a smooth motion trail."], "extent": [45230, 45594]}, {"type": "para", "indent": 4, "text": ["Deformation blur is ignored for objects that have ", {"scheme": null, "value": "/render/blur#velocity", "type": "link", "text": ["Velocity motion blur"], "fullpath": "/render/blur.html#velocity", "fragment": "#velocity"}, " turned on."], "extent": [45594, 45705]}], "container": true, "attrs": {"hprop": "karma:object:geosamples", "kagroup": "Motion Blur"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Transform Time Samples"], "role": "item", "extent": [45705, 45731], "body": [{"type": "para", "indent": 4, "text": ["The number of samples to compute when rendering ", {"type": "em", "text": ["transformation"]}, " motion blur over the shutter open time.  The default is 2 samples (at the start and end of the shutter time), giving one blurred segment."], "extent": [45796, 46004]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/blur/XFormSampleSimple.jpg", "type": "img", "text": ""}], "role": "item", "extent": [46004, 46068]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["If you have object moving and changing direction extremely quickly, you might want to increase the number of samples to capture the sub-frame direction changes."], "extent": [46068, 46234]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/blur/XFormSampleComplex.jpg", "type": "img", "text": ""}], "role": "item", "extent": [46234, 46299]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["In the above example, it requires 40 transformation samples to correctly render the complex motion that occurs within one frame. (This amount of change within a single frame is very unusual and only used as a demonstration.)"], "extent": [46299, 46529]}, {"type": "para", "indent": 4, "text": ["Transformation blur simulates blur by interpolating each object\u2019s transformation between frames, so it\u2019s cheap to compute but does not capture surface deformation. To enable blurring deforming geometry, increase ", {"scheme": "Karma", "value": "karma:object:geosamples", "type": "link", "text": "", "exists": true}, "."], "extent": [46529, 46779]}], "container": true, "attrs": {"hprop": "karma:object:xformsamples", "kagroup": "Motion Blur"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Instance Velocity Blur"], "role": "item", "extent": [46779, 46805], "body": [{"type": "para", "indent": 4, "text": ["When defining motion blur on instances, the transform of each instance can be blurred in addition to any motion blur occurring on the prototype.  This option controls how the instance will compute the motion blur of the transform on each instance.  For example, when instancing prototypes to a particle system, you'd likely want to use velocity blur to compute motion blur (the transform on the prototype would be blurred by the velocity on the particles)."], "extent": [46872, 47334]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["No Velocity Blur"], "extent": [47334, 47356], "body": [{"type": "para", "indent": 8, "text": ["Use deformation blur of the instance to compute the blur on the transform."], "extent": [47356, 47440]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Velocity Blur"], "extent": [47440, 47459], "body": [{"type": "para", "indent": 8, "text": ["To use velocity blur, the instance must be a point instancer with velocity attributes on the points."], "extent": [47459, 47569]}, {"type": "para", "indent": 8, "text": ["The ", {"type": "code", "text": ["velocities"]}, " attribute value is measured in Houdini units per second."], "extent": [47569, 47652]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Acceleration Blur"], "extent": [47652, 47675], "body": [{"type": "para", "indent": 8, "text": ["To use acceleration blur, the instance must be a point instancer with point velocities and acceleration values.  The renderer uses this attribute, if it exists, to render multi-segment acceleration motion blur (assuming the renderer is set to allow motion blur). The ", {"type": "code", "text": ["accel"]}, " attribute may be created automatically by simulation nodes, or you can compute and add it using the ", {"scheme": "Node", "value": "/nodes/sop/pointvelocity", "type": "link", "text": ["Point velocity SOP"], "fullpath": "/nodes/sop/pointvelocity.html"}, "; this will be converted to ", {"type": "code", "text": ["accelerations"]}, " when the SOP geometry is converted to USD."], "extent": [47675, 48189]}], "container": true}], "container": true}], "container": true, "attrs": {"hprop": "karma:object:instance_vblur", "kagroup": "Motion Blur"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Instance Motion Samples"], "role": "item", "extent": [48189, 48216], "body": [{"type": "para", "indent": 4, "text": ["When motion blur on instances is computed using ", {"type": "ui", "text": ["Acceleration Blur"]}, " or ", {"type": "ui", "text": ["Deformation Blur"]}, ", this parameter specifies the number of motion segments used for motion blur."], "extent": [48285, 48462]}], "container": true, "attrs": {"hprop": "karma:object:instance_samples", "kagroup": "Motion Blur"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Dicing Quality"], "role": "item", "extent": [48462, 48480], "body": [{"type": "para", "indent": 4, "text": ["This parameter controls the geometric subdivision resolution for smooth surfaces (subdivision surfaces and displaced surfaces).  With all other parameters at their defaults, a value of 1 means that approximately 1 micropolygon will be created per pixel.  A higher value will generate smaller micropolygons meaning that more shading will occur - but the quality will be higher."], "extent": [48541, 48923]}, {"type": "para", "indent": 4, "text": ["The effect of changing the shading quality is to increase or decrease the amount of shading by a factor of ", {"type": "code", "text": ["karma:object:dicingquality"]}, " ", {"type": "strong", "text": ["squared"]}, " - so a shading quality of 2 will perform 4 times as much shading and a shading quality of 0.5 will perform 1/4 times as much shading."], "extent": [48923, 49208]}], "container": true, "attrs": {"hprop": "karma:object:dicingquality", "kagroup": "Dicing"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Dicing Flatness"], "role": "item", "extent": [49208, 49227], "body": [{"type": "para", "indent": 4, "text": ["This property controls the tesselation levels for nearly flat primitives. By increasing the value, more primitives will be considered flat and will be sub-divided less. Turn this option ", {"type": "em", "text": ["down"]}, " for more accurate (less optimized) nearly-flat surfaces."], "extent": [49289, 49544]}], "container": true, "attrs": {"hprop": "karma:object:dicingflatness", "kagroup": "Dicing"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["True Displacements"], "role": "item", "extent": [49544, 49566], "body": [{"type": "para", "indent": 4, "text": ["When true, displacements are turned off, the geometry is not diced and instead the displacement shader performs bump mapping on the surface."], "extent": [49626, 49772]}, {"type": "para", "indent": 4, "text": ["This is only supported for Karma CPU."], "extent": [49772, 49815]}], "container": true, "attrs": {"hprop": "karma:object:truedisplace", "kagroup": "Dicing"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Cusp Angle"], "role": "item", "extent": [49815, 49829], "body": [{"type": "para", "indent": 4, "text": ["If there are no normals on an object, any edges with a dihedral angle greater than this value will be cusped.  For compatibility with ", {"type": "code", "text": ["mantra"]}, ", Karma will also look for a detail attribute named ", {"type": "code", "text": ["vm_cuspangle"]}, " (which takes priority over the setting)."], "extent": [49887, 50142]}], "container": true, "attrs": {"hprop": "karma:object:cuspangle", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Diffuse Samples"], "role": "item", "extent": [50142, 50161], "body": [{"type": "para", "indent": 4, "text": ["Specifies the quality of indirect diffuse shading.  A value of ", {"type": "code", "text": ["1"]}, "\n    translates to roughly one additional diffuse sample per shading\n    computation.  A sample value of ", {"type": "code", "text": ["4"]}, " translates to roughly 4 additional diffuse\n    samples per shading computation."], "extent": [50225, 50485]}], "container": true, "attrs": {"hprop": "karma:object:diffusesamples", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Reflect Samples"], "role": "item", "extent": [50485, 50504], "body": [{"type": "para", "indent": 4, "text": ["Specifies the quality of indirect reflection shading.  A value of ", {"type": "code", "text": ["1"]}, "\n    translates to roughly one additional reflection sample per shading\n    computation.  A sample of ", {"type": "code", "text": ["4"]}, " translates to roughly 4 additional reflection\n    samples per shading computation."], "extent": [50568, 50831]}], "container": true, "attrs": {"hprop": "karma:object:reflectsamples", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Refract Samples"], "role": "item", "extent": [50831, 50850], "body": [{"type": "para", "indent": 4, "text": ["Specifies the quality of indirect refraction shading.  A value of ", {"type": "code", "text": ["1"]}, "\n    translates to roughly one additional refraction sample per shading\n    computation.  A sample of ", {"type": "code", "text": ["4"]}, " translates to roughly 4 additional refraction\n    samples per shading computation."], "extent": [50914, 51177]}], "container": true, "attrs": {"hprop": "karma:object:refractsamples", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Volume Samples"], "role": "item", "extent": [51177, 51195], "body": [{"type": "para", "indent": 4, "text": ["Specifies the quality of indirect volumetric shading.  A value of ", {"type": "code", "text": ["1"]}, "\n    translates to roughly one additional volumetric sample per shading\n    computation.  A sample of ", {"type": "code", "text": ["4"]}, " translates to roughly 4 additional volumetric\n    samples per shading computation."], "extent": [51258, 51521]}], "container": true, "attrs": {"hprop": "karma:object:volumesamples", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["SSS Samples"], "role": "item", "extent": [51521, 51536], "body": [{"type": "para", "indent": 4, "text": ["Specifies the quality of indirect sub-surface scattering shading.  A value\n    of ", {"type": "code", "text": ["1"]}, " translates to roughly one additional sub-surface scattering sample\n    per shading computation.  A sample of ", {"type": "code", "text": ["4"]}, " translates to roughly 4 additional\n    sub-surface scattering samples per shading computation."], "extent": [51596, 51895]}], "container": true, "attrs": {"hprop": "karma:object:ssssamples", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Diffuse Limit"], "role": "item", "extent": [51895, 51912], "body": [{"type": "para", "indent": 4, "text": ["The number of times diffuse rays can propagate through your scene."], "extent": [51972, 52044]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/DiffuseLimit.jpg", "type": "img", "text": ""}], "role": "item", "extent": [52044, 52109]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Unlike ", {"type": "ui", "text": ["Reflect Limit"]}, " and ", {"type": "ui", "text": ["Refract Limit"]}, ", this parameter will increase the overall amount of light in your scene and contribute to the majority of global illumination. With this parameter set to values greater than ", {"type": "code", "text": ["0"]}, ", diffuse surfaces will accumulate light from other objects in addition to direct light sources."], "extent": [52109, 52435]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/DiffuseLimitCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [52435, 52507]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["In this example, increasing the ", {"type": "ui", "text": ["Diffuse Limit"]}, " has a dramatic effect on the appearance of the final image. To replicate realistic lighting conditions, it is often necessary to increase the ", {"type": "ui", "text": ["Diffuse Limit"]}, ". However, since the amount of light contribution usually decreases with each diffuse bounce, increasing the ", {"type": "ui", "text": ["Diffuse Limit"]}, " beyond ", {"type": "code", "text": ["4"]}, " hardly improve the visual fidelity of a scene. Additionally, increasing the ", {"type": "ui", "text": ["Diffuse Limit"]}, " can dramatically increase noise levels and render times."], "extent": [52507, 53010]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/DiffuseSubtleCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [53010, 53083]}], "container": true, "role": "item_group"}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "role": "item", "extent": [53083, 53093], "body": [{"type": "para", "indent": 8, "text": ["This is a float because all limits are stochastically picked per-sample, so for example you can set the diffuse limit to ", {"type": "code", "text": ["3.25"]}, " and have 25% of the rays with a diffuse limit of ", {"type": "code", "text": ["4"]}, " and 75% of rays with a diffuse limit of ", {"type": "code", "text": ["3"]}, "."], "extent": [53125, 53360]}], "container": true, "attrs": {"id": "stochastic_limits"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"hprop": "karma:object:diffuselimit", "kagroup": "Limits"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Reflection Limit"], "role": "item", "extent": [53360, 53380], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/ReflectLimit.jpg", "type": "img", "text": ""}], "role": "item", "extent": [53440, 53504], "body": [{"type": "para", "indent": 8, "text": ["The number of times a ray can be reflected in your scene."], "extent": [53504, 53571]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/ReflectSceneSetup.png", "type": "img", "text": ""}], "role": "item", "extent": [53571, 53641], "body": [{"type": "para", "indent": 8, "text": ["This example shows a classic ", {"type": "q", "text": ["Hall of Mirrors"]}, " scenario with the subject placed between two mirrors."], "extent": [53641, 53751]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/ReflectLimitCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [53751, 53823], "body": [{"type": "para", "indent": 8, "text": ["This effectively creates an infinite series of reflections."], "extent": [53823, 53892]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/ReflectSubtleCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [53892, 53965], "body": [{"type": "para", "indent": 8, "text": ["From this camera angle the reflection limits are very obvious and have a large impact on the accuracy of the final image. However, in most cases the reflection limit will be more subtle, allowing you to reduce the number of reflections in your scene and optimize the time it takes to render them."], "extent": [53965, 54271]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Remember that the first time a light source is reflected in an object, it is considered a direct reflection. Therefore, even with ", {"type": "ui", "text": ["Reflect Limit"]}, " set to ", {"type": "code", "text": ["0"]}, ", you will still see specular reflections of light sources."], "extent": [54271, 54494]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "role": "item", "extent": [53083, 53093], "body": [{"type": "para", "indent": 8, "text": ["This is a float because all limits are stochastically picked per-sample, so for example you can set the diffuse limit to ", {"type": "code", "text": ["3.25"]}, " and have 25% of the rays with a diffuse limit of ", {"type": "code", "text": ["4"]}, " and 75% of rays with a diffuse limit of ", {"type": "code", "text": ["3"]}, "."], "extent": [53125, 53360]}], "container": true, "attrs": {"id": "stochastic_limits"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"hprop": "karma:object:reflectlimit", "kagroup": "Limits"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Refraction Limit"], "role": "item", "extent": [54528, 54548], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/RefractLimit.jpg", "type": "img", "text": ""}], "role": "item", "extent": [54608, 54673], "body": [{"type": "para", "indent": 8, "text": ["This parameter control the number of times a ray be refracted in your scene."], "extent": [54673, 54759]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/RefractSceneSetup.png", "type": "img", "text": ""}], "role": "item", "extent": [54759, 54829], "body": [{"type": "para", "indent": 8, "text": ["This example shows a simple scene with ten grids all in a row."], "extent": [54829, 54901]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/RefractLimitCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [54901, 54973], "body": [{"type": "para", "indent": 8, "text": ["By applying a refractive shader, we will be able see through the grids to an image of a sunset in the background."], "extent": [54973, 55096]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/RefractSubtleCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [55096, 55169], "body": [{"type": "para", "indent": 8, "text": ["From this camera angle, in order for the image to be accurate, the refraction limit must match the number of grids that that are in the scene. However, most scenes will not have this number of refractive objects all in a row and so it is possible to reduce the refract limit without affecting the final image while also reducing the time it takes to render them."], "extent": [55169, 55541]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/RefractLimitSurfaces.jpg", "type": "img", "text": ""}], "role": "item", "extent": [55541, 55614], "body": [{"type": "para", "indent": 8, "text": ["Keep in mind that this ", {"type": "ui", "text": ["Refract Limit"]}, " refers to the number of surfaces that the ray must travel through, not the number of objects."], "extent": [55614, 55758]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Remember that the first time a light source is refracted through a surface, it is considered a direct refraction. Therefore, even with ", {"type": "ui", "text": ["Refract Limit"]}, " set to ", {"type": "code", "text": ["0"]}, ", you will see refraction of light sources. However, since most objects in your scene will have at least two surfaces between it and the light source, direct refraction is often not evident in your final render."], "extent": [55758, 56138]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "role": "item", "extent": [53083, 53093], "body": [{"type": "para", "indent": 8, "text": ["This is a float because all limits are stochastically picked per-sample, so for example you can set the diffuse limit to ", {"type": "code", "text": ["3.25"]}, " and have 25% of the rays with a diffuse limit of ", {"type": "code", "text": ["4"]}, " and 75% of rays with a diffuse limit of ", {"type": "code", "text": ["3"]}, "."], "extent": [53125, 53360]}], "container": true, "attrs": {"id": "stochastic_limits"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"hprop": "karma:object:refractlimit", "kagroup": "Limits"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Volume Limit"], "role": "item", "extent": [56172, 56188], "body": [{"type": "para", "indent": 4, "text": ["The number of times a volumetric ray can propagate through a scene. It functions in a similar fashion to the ", {"type": "ui", "text": ["Diffuse Limit"]}, " parameter."], "extent": [56247, 56390]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/VolumeLimit.jpg", "type": "img", "text": ""}], "role": "item", "extent": [56390, 56454]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Increasing the ", {"type": "ui", "text": ["Volume Limit"]}, " parameter will result in much more realistic volumetric effects. This is especially noticeable in situations where only part of a volume is receiving direct lighting. Also, in order for a volumetric object to receive indirect light from other objects, the ", {"type": "ui", "text": ["Volume Limit"]}, " parameter must be set above ", {"type": "code", "text": ["0"]}, "."], "extent": [56454, 56797]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/VolumeLimitCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [56797, 56868]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["With the ", {"type": "ui", "text": ["Volume Limit"]}, " set to values greater than ", {"type": "code", "text": ["0"]}, ", the fog volume takes on the characteristic light scattering you would expect from light traveling through a volume. However, as with the ", {"type": "ui", "text": ["Diffuse Limit"]}, ", the light contribution generally decreases with each bounced ray and therefore using values above ", {"type": "code", "text": ["4"]}, " does not necessarily result in a noticeably more realistic image."], "extent": [56868, 57255]}, {"type": "para", "indent": 4, "text": ["Also, increasing the value of this parameter can dramatically increase the amount of time spent rendering volumetric images."], "extent": [57255, 57385]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "role": "item", "extent": [53083, 53093], "body": [{"type": "para", "indent": 8, "text": ["This is a float because all limits are stochastically picked per-sample, so for example you can set the diffuse limit to ", {"type": "code", "text": ["3.25"]}, " and have 25% of the rays with a diffuse limit of ", {"type": "code", "text": ["4"]}, " and 75% of rays with a diffuse limit of ", {"type": "code", "text": ["3"]}, "."], "extent": [53125, 53360]}], "container": true, "attrs": {"id": "stochastic_limits"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"hprop": "karma:object:volumelimit", "kagroup": "Limits"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["SSS Limit"], "role": "item", "extent": [57419, 57432], "body": [{"type": "para", "indent": 4, "text": ["The number of times a SSS ray can propagate through a scene. It functions\n    in a similar fashion to the ", {"type": "ui", "text": ["Diffuse Limit"]}, " parameter."], "extent": [57488, 57628]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "role": "item", "extent": [53083, 53093], "body": [{"type": "para", "indent": 8, "text": ["This is a float because all limits are stochastically picked per-sample, so for example you can set the diffuse limit to ", {"type": "code", "text": ["3.25"]}, " and have 25% of the rays with a diffuse limit of ", {"type": "code", "text": ["4"]}, " and 75% of rays with a diffuse limit of ", {"type": "code", "text": ["3"]}, "."], "extent": [53125, 53360]}], "container": true, "attrs": {"id": "stochastic_limits"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"hprop": "karma:object:ssslimit", "kagroup": "Limits"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Diffuse Quality"], "role": "item", "extent": [57662, 57681], "body": [{"type": "para", "indent": 4, "text": ["This parameter acts as a multiplier on ", {"type": "ui", "text": ["Min Secondary Samples"]}, " and ", {"type": "ui", "text": ["Max Secondary Samples"]}, " for indirect diffuse component."], "extent": [57745, 57877]}], "container": true, "attrs": {"hprop": "karma:object:diffusequality", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Reflection Quality"], "role": "item", "extent": [57877, 57899], "body": [{"type": "para", "indent": 4, "text": ["This parameter acts as a multiplier on ", {"type": "ui", "text": ["Min Secondary Samples"]}, " and ", {"type": "ui", "text": ["Max Secondary Samples"]}, " for indirect reflect component."], "extent": [57963, 58095]}], "container": true, "attrs": {"hprop": "karma:object:reflectquality", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Refraction Quality"], "role": "item", "extent": [58095, 58117], "body": [{"type": "para", "indent": 4, "text": ["This parameter acts as a multiplier on ", {"type": "ui", "text": ["Min Secondary Samples"]}, " and ", {"type": "ui", "text": ["Max Secondary Samples"]}, " for indirect refract component."], "extent": [58181, 58313]}], "container": true, "attrs": {"hprop": "karma:object:refractquality", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Volume Quality"], "role": "item", "extent": [58313, 58331], "body": [{"type": "para", "indent": 4, "text": ["This parameter acts as a multiplier on ", {"type": "ui", "text": ["Min Secondary Samples"]}, " and ", {"type": "ui", "text": ["Max Secondary Samples"]}, " for indirect volume component."], "extent": [58394, 58525]}], "container": true, "attrs": {"hprop": "karma:object:volumequality", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["SSS Quality"], "role": "item", "extent": [58525, 58540], "body": [{"type": "para", "indent": 4, "text": ["This parameter acts as a multiplier on ", {"type": "ui", "text": ["Min Secondary Samples"]}, " and ", {"type": "ui", "text": ["Max Secondary Samples"]}, " for the SSS component."], "extent": [58600, 58723]}], "container": true, "attrs": {"hprop": "karma:object:sssquality", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Volume Step Rate"], "role": "item", "extent": [58723, 58743], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/sampling_tab/VolumeQuality.jpg", "type": "img", "text": ""}], "role": "item", "extent": [58807, 58875]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["How finely or coarsely a volume is sampled as a ray travels through it.\n    Volumetric objects are made up of 3-dimensional structures called Voxels, the\n    value of this parameter represents the number of voxels a ray will\n    travel through before performing another sample."], "extent": [58875, 59158]}, {"type": "para", "indent": 4, "text": ["The default value is ", {"type": "code", "text": ["0.25"]}, ", which means that every one of every four\n    voxels will be sampled. A value of ", {"type": "code", "text": ["1"]}, " means that all voxels are\n    sampled and a value of ", {"type": "code", "text": ["2"]}, " means that all voxels are sampled twice. This\n    means that the volume step rate value behaves in a similar way to pixel\n    samples, acting as a multiplier on the total number of samples for\n    volumetric objects."], "extent": [59158, 59550]}, {"type": "para", "indent": 4, "text": ["Keep in mind that increasing the volume step rate can dramatically increase\n    render times, so it should only be adjusted when necessary. Also, while\n    increasing the default from ", {"type": "code", "text": ["0.25"]}, " can reduce volumetric noise, increasing\n    the value beyond ", {"type": "code", "text": ["1"]}, " will rarely see similar results."], "extent": [59550, 59844]}], "container": true, "attrs": {"hprop": "karma:object:volumesteprate", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Uniform Volume"], "role": "item", "extent": [59844, 59862], "body": [{"type": "para", "indent": 4, "text": ["Whether to render this object as if it was a uniform-density volume. Using\n    this property on surface geometry is more efficient than actually creating\n    a volume object of uniform density, since the renderer can assume that the\n    volume density is uniform and place samples more optimally. The surface\n    normal of the surface is used to determine which side of the surface will\n    render as a volume - the normal will point away from the interior. The\n    surface doesn\u2019t need be closed - if the surface is not closed, the volume will\n    extend an infinite distance away from the surface. Non-closed surfaces may\n    produce unexpected results near the edge of the surface, so try to keep the\n    viewing camera away from the edges."], "extent": [59931, 60680]}], "container": true, "attrs": {"hprop": "karma:object:volumeuniform", "kagroup": "Uniform Volume"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Uniform Volume Density"], "role": "item", "extent": [60680, 60706], "body": [{"type": "para", "indent": 4, "text": ["Determines how the samples are distributed when rendering a uniform volume\n    (", {"type": "code", "text": ["karma:object:volumeuniform"]}, " is enabled). This parameter must match the\n    density on the uniform volume shader in order to produce correct results."], "extent": [60782, 61017]}], "container": true, "attrs": {"hprop": "karma:object:volumeuniformdensity", "kagroup": "Uniform Volume"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Uniform Volume Samples"], "role": "item", "extent": [61017, 61043], "body": [{"type": "para", "indent": 4, "text": ["The number of samples to generate when rendering a uniform volume\n    (", {"type": "code", "text": ["karma:object:volumeuniform"]}, " is enabled).  The samples will be distributed\n    so as to produce an equal image contribution if they were all equal in\n    brightness."], "extent": [61119, 61361]}], "container": true, "attrs": {"hprop": "karma:object:volumeuniformsamples", "kagroup": "Uniform Volume"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Volume Velocity Blur Scale"], "role": "item", "extent": [61361, 61391], "body": [{"type": "para", "indent": 4, "text": ["Velocity multiplier used to reduce or exaggerate amount of motion blur on\n    volumes."], "extent": [61460, 61552]}], "container": true, "attrs": {"hprop": "karma:object:volumevblurscale", "kagroup": "Motion Blur"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Volume Sampling Field"], "role": "item", "extent": [61552, 61577], "body": [{"type": "para", "indent": 4, "text": ["Specifies the volume field by name that will be used for empty space\n    culling. By default karma will use the 'density' field if it exists. If you\n    are rendering an emissive volume in which some parts of the volume have zero\n    density, but still need to be rendered, you should specify a different field\n    using this parameter."], "extent": [61648, 61990]}], "container": true, "attrs": {"hprop": "karma:object:volumesamplingchannel", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Volume Filter"], "role": "item", "extent": [61990, 62007], "body": [{"type": "para", "indent": 4, "text": ["Some volume primitives can use a filter during evaluation of volume channels. This specifies the filter.  The default box filter is fast to evaluate and produces sharp renders for most smooth fluid simulations.  If your voxel data contains aliasing (stair stepping effects along edges), you may need to use a larger filter width or smoother filter to produce acceptable results.  For aliased volume data, ", {"type": "code", "text": ["gauss"]}, " is a good filter with a filter width of ", {"type": "code", "text": ["1.5"]}, "."], "extent": [62069, 62534]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["point"]}], "extent": [62534, 62548]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["box"]}], "extent": [62548, 62560]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["gauss"]}], "extent": [62560, 62574]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["bartlett"]}], "extent": [62574, 62591]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["blackman"]}], "extent": [62591, 62608]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["catrom"]}], "extent": [62608, 62623]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["hanning"]}], "extent": [62623, 62639]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["mitchell"]}], "extent": [62639, 62657]}], "container": true}], "container": true, "attrs": {"hprop": "karma:object:volumefilter", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Volume Filter Width"], "role": "item", "extent": [62657, 62680], "body": [{"type": "para", "indent": 4, "text": ["This specifies the filter width for the ", {"type": "ui", "text": ["Volume Filter"]}, " property. The\n    filter width is specified in number of voxels. Larger filter widths take\n    longer to render and produce blurrier renders, but may be necessary to\n    combat aliasing in some kinds of voxel data."], "extent": [62747, 63025]}], "container": true, "attrs": {"hprop": "karma:object:volumefilterwidth", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Holdout Mode"], "role": "item", "extent": [63025, 63041], "body": [{"type": "para", "indent": 4, "text": ["When this is set to ", {"type": "q", "text": ["Matte"]}, " mode, the object will be considered to be a\n    cutout matte. Any lighting contribution and alpha of the object will be\n    redirected to LPE AOVs with ", {"type": "q", "text": ["holdouts"]}, " prefix. Holdout Mode does not affect\n    the utility AOVs such as ", {"type": "code", "text": ["ray:hitP"]}, " and ", {"type": "code", "text": ["ray:hitN"]}, ".\n    ", {"type": "ui", "text": ["Background"]}, " mode is similar to ", {"type": "ui", "text": ["Matte"]}, ". If it\u2019s used for background\n    plates, it will appear ", {"type": "q", "text": ["pre-lit"]}, " in indirect bounces, multiplied by shadow\n    contribution. Diffuse albedo of the shader is used to determine the pre-lit\n    irradiance."], "extent": [63101, 63642]}], "container": true, "attrs": {"hprop": "karma:object:holdoutmode", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Render Points As"], "role": "item", "extent": [63642, 63662], "body": [{"type": "para", "indent": 4, "text": ["When rendering point clouds, they can be rendered as camera oriented\n    discs, spheres or discs oriented to the normal attribute."], "extent": [63723, 63859]}], "container": true, "attrs": {"hprop": "karma:object:point_style", "kagroup": "Geometry"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Render Curves As"], "role": "item", "extent": [63859, 63879], "body": [{"type": "para", "indent": 4, "text": ["When rendering curves, they can be rendered as ribbons oriented to face\n    the camera, rounded tubes or ribbons oriented to the normal attribute\n    attached to the points."], "extent": [63940, 64119]}], "container": true, "attrs": {"hprop": "karma:object:curve_style", "kagroup": "Geometry"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Override Curves Basis"], "role": "item", "extent": [64119, 64144], "body": [{"type": "para", "indent": 4, "text": ["USD supports ", {"type": "ui", "text": ["Curve Basis"]}, " types that may not be supported directly in\n    Houdini.  In some cases, you may want to override the Houdini curve basis.\n    For example, if you have linear curves in Houdini, you may want to render\n    them with a Bezier, B-Spline or Catmull-Rom basis.  This menu will force\n    Karma to override the basis that\u2019s tied to the USD primitives."], "extent": [64205, 64584]}, {"type": "para", "indent": 4, "text": ["Note that the topology of the curves must match the target basis.  For\n    example, when selecting any cubic curve basis, every curves must have at\n    least 4 vertices.  For the Bezier basis, curves must have ", {"type": "code", "text": ["4+3*N"]}, " vertices."], "extent": [64584, 64817]}], "container": true, "attrs": {"hprop": "karma:object:curve_basis", "kagroup": "Geometry"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Cull Backface"], "role": "item", "extent": [64817, 64834], "body": [{"type": "para", "indent": 4, "text": ["If enabled, geometry that are facing away from the camera are not\n    rendered."], "extent": [64897, 64982]}], "container": true, "attrs": {"hprop": "karma:object:cull_backface", "kagroup": "Geometry"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Fix Shadow Terminator"], "role": "item", "extent": [64982, 65007], "body": [{"type": "para", "indent": 4, "text": ["Adjust shading position of shadow rays to avoid self-shadowing artifact on\n    low-poly mesh due to discrepancy between smooth normals and face normals."], "extent": [65063, 65221]}], "container": true, "attrs": {"hprop": "karma:object:smoothp", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["LPE Tag"], "role": "item", "extent": [65221, 65232], "body": [{"type": "para", "indent": 4, "text": ["Custom label assigned to lights or objects for use with ", {"scheme": null, "value": "/render/lpe", "type": "link", "text": ["light path expression"], "fullpath": "/render/lpe.html"}, "."], "extent": [65287, 65385]}], "container": true, "attrs": {"hprop": "karma:object:lpetag", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Orientation"], "role": "item", "extent": [65385, 65400], "body": [{"type": "para", "indent": 4, "text": ["May be queried via ", {"scheme": null, "value": "/vex/functions/objectstate", "type": "link", "text": ["objectstate"], "fullpath": "/vex/functions/objectstate.html"}, " vex function\n    and will be ", {"type": "code", "text": ["rightHanded"]}, " or ", {"type": "code", "text": ["leftHanded"]}, " depending on the geometry\u2019s\n    winding order. This property is derived from USD geometry\u2019s orientation\n    attribute and not directly settable."], "extent": [65461, 65730]}], "container": true, "attrs": {"hprop": "karma:object:orientation", "kagroup": "Geometry"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Direct Refraction Subset"], "role": "item", "extent": [65730, 65758], "body": [{"type": "para", "indent": 4, "text": ["For compound BSDFs with refractive components, only apply direct lighting\n    for lights that belong in specified location. A light ray facing the same\n    direction as geometry normal is considered ", {"type": "q", "text": ["Outside"]}, ". For transparent\n    material that are solid/closed-manifold, setting this parameter to\n    ", {"type": "q", "text": ["Outside"]}, " can improve render performance by reducing noise in direct\n    lighting and cut down on wasted shadow rays."], "extent": [65818, 66242]}], "container": true, "attrs": {"hprop": "karma:object:lightsubset", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": [" Enable Caustics"], "role": "item", "extent": [66242, 66262], "body": [{"type": "para", "indent": 4, "text": ["Allows evaluation of glossy BSDF that\u2019s seen by indirect diffuse bounce.\n    This is a brute-force solution which may require significant number of\n    diffuse rays to resolve, especially if Caustics Roughness Clamp parameter\n    is set to very small value or Indirect Guiding feature is disabled."], "extent": [66325, 66628]}], "container": true, "attrs": {"hprop": "karma:object:causticsenable", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": [" Caustics Roughness Clamp"], "role": "item", "extent": [66628, 66657], "body": [{"type": "para", "indent": 4, "text": ["Increasing this value can make caustics less noisy at the cost of accuracy."], "extent": [66728, 66809]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [66809, 66819], "body": [{"type": "para", "indent": 8, "text": ["Roughness clamp only works with GGX BSDF and may not have any effect\n        with Phong, cone, or specular BSDFs."], "extent": [66819, 66942]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"hprop": "karma:object:causticsroughnessclamp", "kagroup": "Shading"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": [" Secondary Noise Level"], "role": "item", "extent": [66942, 66968], "body": [{"type": "para", "indent": 4, "text": ["Noise threshold to determine the number of indirect rays cast for indirect bounce when the Convergence Mode is set to ", {"type": "q", "text": ["Automatic"]}, ". Decreasing this threshold (for example, to ", {"type": "code", "text": ["0.001"]}, ") will theoretically send more indirect rays and decrease noise, however the ", {"type": "q", "text": ["extra"]}, " rays will likely be cancelled out by the ", {"type": "ui", "text": ["Max Ray Samples"]}, " parameter. The correct way to decrease noise is to increase the number of samples per pixel, rather than change this threshold."], "extent": [67035, 67495]}, {"type": "para", "indent": 4, "text": ["If you are using ", {"type": "ui", "text": ["Variance Pixel Oracle"]}, ", you should set the same value for both threshold parameters. Setting the oracle\u2019s threshold lower may make the indirect component reach its threshold sooner and cast fewer indirect rays, but the oracle decides to cast more expensive camera rays because the amount of final noise in the beauty pass is higher than the oracle\u2019s threshold."], "extent": [67495, 67881]}], "container": true, "attrs": {"hprop": "karma:object:varianceaa_thresh", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": [" Min Secondary Samples"], "role": "item", "extent": [67881, 67907], "body": [{"type": "para", "indent": 4, "text": ["Minimum number of rays to cast in per-component variance anti-aliasing."], "extent": [67978, 68055]}], "container": true, "attrs": {"hprop": "karma:object:varianceaa_minsamples", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": [" Max Secondary Samples"], "role": "item", "extent": [68055, 68081], "body": [{"type": "para", "indent": 4, "text": ["Maximum number of rays to cast in per-component variance anti-aliasing."], "extent": [68152, 68229]}], "container": true, "attrs": {"hprop": "karma:object:varianceaa_maxsamples", "kagroup": "Sampling"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Is Portal"], "role": "item", "extent": [68229, 68242], "body": [{"type": "para", "indent": 4, "text": ["When enabled, the object will turn into a ", {"type": "q", "text": ["light portal"]}, " that only lets in\n    certain portion of dome lights based on portal geometry visibility."], "extent": [68297, 68449]}], "container": true, "attrs": {"hprop": "karma:object:isportal", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Portal Dome Lights"], "role": "item", "extent": [68449, 68471], "body": [{"type": "para", "indent": 4, "text": ["Space-separated list of dome lights to associate this portal with."], "extent": [68534, 68606]}], "container": true, "attrs": {"hprop": "karma:object:portaldomelights", "kagroup": "Light"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Low Resolution Object ID"], "role": "item", "extent": [68606, 68634], "body": [{"type": "para", "indent": 4, "text": ["Defines this object as the low resolution object corresponding to said\n    ", {"type": "ui", "text": ["Texture Baking Object ID"]}, ". This means that the texture space of this object\n    is what is being baked. If no high resolution object exists for this Object\n    ID, this is the rendered appearance for the texture in that space as well.\n    This is required for texture baking."], "extent": [68709, 69068]}], "container": true, "attrs": {"hprop": "karma:object:uvunwrap_lowres_obj", "kagroup": "Texture Baking"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Cage Object ID"], "role": "item", "extent": [69068, 69086], "body": [{"type": "para", "indent": 4, "text": ["Defines this object as the cage object corresponding to said ", {"type": "ui", "text": ["Texture Baking\n    Object ID"]}, ". This means that this object is used to help resolve normal\n    discontinuities during texture baking of the low resolution object. This is\n    optional for texture baking."], "extent": [69159, 69431]}], "container": true, "attrs": {"hprop": "karma:object:uvunwrap_cage_obj", "kagroup": "Texture Baking"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["High Resolution Object ID"], "role": "item", "extent": [69431, 69460], "body": [{"type": "para", "indent": 4, "text": ["Defines this object as the high resolution object corresponding to said\n    ", {"type": "ui", "text": ["Texture Baking Object ID"]}, ". This means that the rendered appearance of this\n    object is what is being baked into the texture space the low resolution\n    object. This is optional for texture baking."], "extent": [69536, 69820]}], "container": true, "attrs": {"hprop": "karma:object:uvunwrap_highres_obj", "kagroup": "Texture Baking"}}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Image Plane Properties"], "extent": [69820, 69849], "body": [{"type": "properties_item_group", "body": [{"ext": null, "type": "properties_item", "indent": 0, "text": ["Default value"], "role": "item", "extent": [69849, 69867], "body": [{"type": "para", "indent": 4, "text": ["This is the clear color for the image plane."], "extent": [69925, 69975]}], "container": true, "attrs": {"hprop": "karma:plane:defaultvalue", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Pixel Filter"], "role": "item", "extent": [69975, 69991], "body": [{"type": "para", "indent": 4, "text": ["Image plane pixel filters are used to combine multiple samples into a\n    single pixel color.  For example, the filter may choose a single sample\n    (closest to the camera, or maximum value), or most commonly, the pixel\n    filter will choose to average the sample values."], "extent": [70043, 70322]}, {"type": "para", "indent": 4, "text": ["This parameter specifies a list of filters.  These filters are specified as\n    a JSON list."], "extent": [70322, 70420]}], "container": true, "attrs": {"hprop": "karma:plane:filter", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Multi-sampled"], "role": "item", "extent": [70420, 70437], "body": [{"type": "para", "indent": 4, "text": ["Indicates whether to average multiple samples into the final color or\n    whether to use the first ray that hits an object.  This setting is\n    deprecated in favor of image plane pixel filters."], "extent": [70491, 70691]}], "container": true, "attrs": {"hprop": "karma:plane:sampling", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Dithering"], "role": "item", "extent": [70691, 70704], "body": [{"type": "para", "indent": 4, "text": ["When Karma quantizes pixels to 8 or 16 bit integer channels, this\n    specifies the dithering to be used.  This is only done if the AOV is\n    specified as 8/16 bit output depth.  It will not be done if conversion is\n    done when writing floating point values to an image format that only\n    supports 8/16 bit integer channel data."], "extent": [70756, 71095]}], "container": true, "attrs": {"hprop": "karma:plane:dither", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Enable Cryptomatte"], "role": "item", "extent": [71095, 71117], "body": [{"type": "para", "indent": 4, "text": ["Enable this to turn this image plane into Cryptomatte layer. See\n    ", {"scheme": null, "value": "/solaris/cryptomatte", "type": "link", "text": ["Cryptomatte"], "fullpath": "/solaris/cryptomatte.html"}, " for more info."], "extent": [71174, 71298]}], "container": true, "attrs": {"hprop": "karma:plane:cryptomatte", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Cryptomatte Max Overlap"], "role": "item", "extent": [71298, 71325], "body": [{"type": "para", "indent": 4, "text": ["Maximum number of IDs that can be stored in a single pixel. A value of 6 is\n    recommended."], "extent": [71386, 71484]}], "container": true, "attrs": {"hprop": "karma:plane:cryptomatterank", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Cryptomatte Manifest File"], "role": "item", "extent": [71484, 71513], "body": [{"type": "para", "indent": 4, "text": ["Optional external manifest file. It will be saved into same directory as\n    the render product. If this path is unspecified, the manifest will be\n    embedded into render product as metadata."], "extent": [71577, 71775]}], "container": true, "attrs": {"hprop": "karma:plane:cryptomattesidecar", "kagroup": "Image"}}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Render Product Properties"], "extent": [71775, 71807], "body": [{"type": "properties_item_group", "body": [{"ext": null, "type": "properties_item", "indent": 0, "text": ["DCM Compression"], "role": "item", "extent": [71807, 71826], "body": [{"type": "para", "indent": 4, "text": ["Compression value between 0 and 10. Used to limit the number of samples\n    which are stored in a lossy compression mode for volume samples.  The\n    compression parameter determines the maximum possible error in scalar\n    channels for each sample. For compression greater than 0, the following\n    relationship holds: ", {"type": "code", "text": ["Error = 1/(2^(10-compression))"]}], "extent": [71888, 72246]}], "container": true, "attrs": {"hprop": "karma:product:dcmcompression", "kagroup": "Image"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["DCM Of Size"], "role": "item", "extent": [72246, 72260], "body": [{"type": "para", "indent": 4, "text": ["Opacity is usually computed as a full-color value and stored as such. To\n    cut down on file size, if full color is not needed, this settings can be\n    used to store a monochromatic version of the full color value.\n    Set this value to 1 for monochrome, 3 for full color."], "extent": [72317, 72597]}], "container": true, "attrs": {"hprop": "karma:product:dcmofsize", "kagroup": "Image"}}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Command Line Properties"], "extent": [72597, 72627], "body": [{"type": "para", "indent": 0, "text": ["These properties are used to specify default values for options normally\nspecified on the command line of the ", {"type": "code", "text": ["karma"]}, " stand-alone renderer."], "extent": [72627, 72769]}, {"type": "properties_item_group", "body": [{"ext": null, "type": "properties_item", "indent": 0, "text": ["Start Frame"], "role": "item", "extent": [72769, 72784], "body": [{"type": "para", "indent": 4, "text": ["The start frame to render."], "extent": [72839, 72871]}], "container": true, "attrs": {"hprop": "karma:command:frame", "kagroup": "Command"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Frame Count"], "role": "item", "extent": [72871, 72886], "body": [{"type": "para", "indent": 4, "text": ["The number of frames to render."], "extent": [72947, 72984]}], "container": true, "attrs": {"hprop": "karma:command:frame_count", "kagroup": "Command"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Frame Increment"], "role": "item", "extent": [72984, 73003], "body": [{"type": "para", "indent": 4, "text": ["When rendering multiple frames (see ", {"type": "code", "text": ["frame_count"]}, "), this specifies the\n    frame increment for each subsequent frame."], "extent": [73062, 73185]}], "container": true, "attrs": {"hprop": "karma:command:frame_inc", "kagroup": "Command"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Snapshot"], "role": "item", "extent": [73185, 73197], "body": [{"type": "para", "indent": 4, "text": ["The time between snapshots of partial render results."], "extent": [73255, 73314]}], "container": true, "attrs": {"hprop": "karma:command:snapshot", "kagroup": "Command"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Render Time Limit"], "role": "item", "extent": [73314, 73335], "body": [{"type": "para", "indent": 4, "text": ["Limit rendering to this number of seconds."], "extent": [73394, 73442]}], "container": true, "attrs": {"hprop": "karma:command:timelimit", "kagroup": "Command"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Time Limit Per-Image"], "role": "item", "extent": [73442, 73466], "body": [{"type": "para", "indent": 4, "text": ["The render time limit is applied per image in a sequence rather than to the\n    full render."], "extent": [73531, 73629]}], "container": true, "attrs": {"hprop": "karma:command:timelimit_image", "kagroup": "Command"}}, {"ext": null, "type": "properties_item", "indent": 0, "text": ["Time Limit No Save Partial"], "role": "item", "extent": [73629, 73659], "body": [{"type": "para", "indent": 4, "text": ["Normally, if the render time limit is exceeded, the partial image will be\n    saved.  If this option is disabled, a partial image will not be saved."], "extent": [73733, 73885]}], "container": true, "attrs": {"hprop": "karma:command:timelimit_nosave_partial", "kagroup": "Command"}}], "container": true, "role": "item_group"}]}], "text": "Properties"}], "title": ["Karma rendering properties"]}