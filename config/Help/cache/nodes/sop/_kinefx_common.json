{"type": "root", "attrs": {"type": "include"}, "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["name"], "extent": [16, 22], "body": [{"type": "para", "indent": 4, "text": ["Point attribute containing a unique name across all points used for identification. This is derived from the corresponding FBX node name. However, FBX node names may not be unique. For these cases, the names will be suffixed with 1, 2, 3, etc."], "extent": [44, 293]}], "container": true, "attrs": {"id": "name_attrib"}}, {"type": "dt", "indent": 0, "text": ["path"], "extent": [293, 299], "body": [{"type": "para", "indent": 4, "text": ["Contains the hierarchical path to the FBX node that corresponds to the point. The ", {"scheme": "Node", "value": "/nodes/sop/kinefx--rop_fbxanimoutput", "type": "link", "text": ["FBX Animation Output SOP"], "fullpath": "/nodes/sop/kinefx--rop_fbxanimoutput.html"}, " node uses this attribute when determining where to export the point\u2019s transforms."], "extent": [338, 569]}], "container": true, "attrs": {"id": "path_attrib", "type": "point"}}, {"type": "dt", "indent": 0, "text": ["fbx_custom_attributes"], "extent": [569, 592], "body": [{"type": "para", "indent": 4, "text": ["Contains a dictionary of user-defined custom properties for the FBX node that corresponds to the point. The dictionary includes both static and animated values evaluated over time.\n    This attribute is created when the ", {"scheme": "Node", "value": "/nodes/sop/kinefx--fbxanimimport", "type": "link", "text": ["FBX Animation Import SOP"], "fullpath": "/nodes/sop/kinefx--fbxanimimport.html"}, " or ", {"scheme": "Node", "value": "/nodes/sop/kinefx--fbxcharacterimport", "type": "link", "text": ["FBX Character Import SOP"], "fullpath": "/nodes/sop/kinefx--fbxcharacterimport.html"}, " nodes import an FBX file."], "extent": [637, 1012]}], "container": true, "attrs": {"id": "fbx_custom_attrib", "type": "point"}}, {"type": "dt", "indent": 0, "text": ["clipinfo"], "extent": [1012, 1022], "body": [{"type": "para", "indent": 4, "text": ["This detail attribute records the current animation range and sample rate,\n    as well as the original animation range and sample rate of the imported\n    animation."], "extent": [1041, 1212]}], "container": true, "attrs": {"id": "clipinfo"}}, {"type": "dt", "indent": 0, "text": ["scaleinheritance"], "extent": [1212, 1230], "body": [{"type": "para", "indent": 4, "text": ["This point attribute specifies the scaling behavior when performing local\n    transformations. For more details on these values, see\n    ", {"scheme": "Vex", "value": "/vex/functions/combinelocaltransform", "type": "link", "text": "", "fallback_text": "combinelocaltransform()", "fullpath": "/vex/functions/combinelocaltransform.html"}, " and ", {"scheme": "Vex", "value": "/vex/functions/extractlocaltransform", "type": "link", "text": "", "fallback_text": "extractlocaltransform()", "fullpath": "/vex/functions/extractlocaltransform.html"}, "."], "extent": [1264, 1467]}], "container": true, "attrs": {"id": "scaleinheritance_attrib"}}, {"type": "dt", "indent": 0, "text": ["transform"], "extent": [1467, 1478], "body": [{"type": "para", "indent": 4, "text": ["This 3\u00d73 matrix point attribute specifies the world transform for the\n    point. While the world position of the point is still ", {"type": "code", "text": ["P"]}, ", this transform\n    encodes the world transform\u2019s rotation, scale, and shear components."], "extent": [1505, 1731]}], "container": true, "attrs": {"id": "transform_attrib"}}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["fbik_targetconfig"]}], "extent": [1731, 1752], "body": [{"type": "para", "indent": 4, "text": ["This dictionary point attribute configures how the joint\u2019s goal transform\n    behaves in a full-body inverse kinematics solver. This is only used when\n    the joint has a goal transform (for example, if the joint is mapped to a\n    joint on the source skeleton). For more details on the valid keys, see the\n    ", {"type": "code", "text": ["targetoptions"]}, " parameter for ", {"scheme": "Vex", "value": "/vex/functions/solvephysfbik", "type": "link", "text": "", "fallback_text": "solvephysfbik()", "fullpath": "/vex/functions/solvephysfbik.html"}, " and ", {"scheme": "Vex", "value": "/vex/functions/solvefbik", "type": "link", "text": "", "fallback_text": "solvefbik()", "fullpath": "/vex/functions/solvefbik.html"}, "."], "extent": [1780, 2167]}], "container": true, "attrs": {"id": "fbik_targetconfig"}}, {"type": "dt", "indent": 0, "text": ["Transformations"], "extent": [2167, 2184], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Group"], "extent": [2210, 2221], "body": [{"type": "para", "indent": 8, "text": ["The point group to which this multiparm instance will be applied."], "extent": [2241, 2316]}], "container": true, "attrs": {"id": "group"}}, {"type": "dt", "indent": 4, "text": ["Mode"], "extent": [2316, 2326], "body": [{"type": "para", "indent": 8, "text": ["Specifies how the transformation described by this multiparm instance should be applied to the input."], "extent": [2345, 2456]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Pre-Multiply"], "extent": [2456, 2478], "body": [{"type": "para", "indent": 12, "text": ["The transformation will be applied on top of the input pose. This is analogous to treating any input local transformations as an object node\u2019s ", {"scheme": null, "value": "/basics/objects#pretransform", "type": "link", "text": ["pre-transform"], "fullpath": "/basics/objects.html#pretransform", "fragment": "#pretransform"}, "."], "extent": [2508, 2710]}], "container": true, "attrs": {"id": "premultiply"}}, {"type": "dt", "indent": 8, "text": ["Post-Multiply"], "extent": [2710, 2733], "body": [{"type": "para", "indent": 12, "text": ["The transformation will be applied in between the input point\u2019s parent transform and its local transform. This is analogous to modifying the ", {"scheme": null, "value": "/basics/objects#pretransform", "type": "link", "text": ["pre-transform"], "fullpath": "/basics/objects.html#pretransform", "fragment": "#pretransform"}, " of an object node. This mode is especially useful if you want to reproportion an animated input using simple translations without compromising any input motion, effectively moving the pivot for the point\u2019s animation."], "extent": [2764, 3180]}], "container": true, "attrs": {"id": "postmultiply"}}, {"type": "dt", "indent": 8, "text": ["Override"], "extent": [3180, 3198], "body": [{"type": "para", "indent": 12, "text": ["The transformation will completely overwrite any input local transforms on the points. This is useful if you want to 'zero out' any input animation, or if you are working with the ", {"type": "ui", "text": ["Bake"]}, " options on the ", {"scheme": "Node", "value": "/nodes/sop/kinefx--rigpose", "type": "link", "text": ["Rig Pose"], "fullpath": "/nodes/sop/kinefx--rigpose.html"}, " node."], "extent": [3225, 3484]}], "container": true, "attrs": {"id": "override"}}, {"type": "dt", "indent": 8, "text": ["From Rest Pose"], "extent": [3484, 3508], "body": [{"type": "para", "indent": 12, "text": ["The transformation will behave like ", {"type": "ui", "text": ["Pre-Multiply"]}, ", but any input animation will be replaced by the pose specified in the ", {"type": "ui", "text": ["Rest Pose"]}, " parameter. This is useful if you want to revert a points transform to a 'rest pose' rather than simply zero out the local transform as is done in ", {"type": "ui", "text": ["Override"]}, "."], "extent": [3539, 3850]}], "container": true, "attrs": {"id": "fromrestpose"}}], "container": true}], "container": true, "attrs": {"id": "mode"}}, {"type": "dt", "indent": 4, "text": ["Transform Order"], "extent": [3850, 3871], "body": [{"type": "para", "indent": 8, "text": ["The left menu specifies the order in which transforms are applied\n        (for example, scale, then rotate, then translate). This can change the\n        position and orientation of the object in the same way that going a\n        block and turning east takes you to a different place than turning east\n        and then going a block."], "extent": [3895, 4237]}, {"type": "para", "indent": 8, "text": ["The right menu specifies the order in which to rotate around the\n        X, Y, and Z axes. Depending on the character, certain rotation orders can\n        make character joint transforms easier to use."], "extent": [4237, 4448]}], "container": true, "attrs": {"id": "transform"}}, {"type": "dt", "indent": 4, "text": ["Translate"], "extent": [4448, 4463], "body": [{"type": "para", "indent": 8, "text": ["Translation along the X, Y, and Z axes."], "extent": [4487, 4536]}], "container": true, "attrs": {"id": "translate"}}, {"type": "dt", "indent": 4, "text": ["Rotate"], "extent": [4536, 4548], "body": [{"type": "para", "indent": 8, "text": ["Degrees rotation about the X, Y, and Z axes."], "extent": [4569, 4623]}], "container": true, "attrs": {"id": "rotate"}}, {"type": "dt", "indent": 4, "text": ["Scale"], "extent": [4623, 4634], "body": [{"type": "para", "indent": 8, "text": ["Non-uniform scaling about the X, Y, and Z axes."], "extent": [4654, 4711]}], "container": true, "attrs": {"id": "scale"}}, {"type": "dt", "indent": 4, "text": ["Pivot"], "extent": [4711, 4722], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Pivot Translate"], "extent": [4742, 4767], "body": [{"type": "para", "indent": 12, "text": ["The pivot translation along the X, Y, and Z axes."], "extent": [4767, 4830]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Pivot Rotate"], "extent": [4830, 4852], "body": [{"type": "para", "indent": 12, "text": ["The pivot rotation about the X, Y, and Z axes."], "extent": [4852, 4912]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pivot"}}], "container": true}], "container": true, "attrs": {"id": "transformations"}}, {"type": "dt", "indent": 0, "text": ["Map Using"], "extent": [4912, 4923], "body": [{"type": "para", "indent": 4, "text": ["This parameter allows you to choose whether to use a dictionary attribute on the first input to look up the drivers on the second input, or simply match by an attribute that is present on both inputs. For example, the second option is useful when the second input contains a subset of the first input\u2019s points."], "extent": [4942, 5258]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Mapping Attribute"], "extent": [5258, 5281], "body": [{"type": "para", "indent": 8, "text": ["Use a dictionary point attribute present on the first input to look up the drivers on the second input. This attribute is created for you by the ", {"scheme": "Node", "value": "/nodes/sop/kinefx--mappoints", "type": "link", "text": ["Map Points SOP"], "fullpath": "/nodes/sop/kinefx--mappoints.html"}, ", but any dictionary attribute matching the following format can be used:"], "extent": [5281, 5552]}, {"type": "disclosure_group", "body": [{"ext": null, "type": "disclosure", "indent": 8, "text": ["Dictionary attribute VEX format"], "role": "item", "extent": [5552, 5604], "body": [{"lang": "vex", "type": "pre", "indent": 12, "text": ["\n            {\n                'reference': string, // The point attribute on the driver skeleton to use as reference. If set to \"ptnum\", the point number will be used.\n                'value': string or int // The value of the point attribute on the point to use as the driver.\n            }\n            "], "extent": [5604, 5946]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"type": "dt", "indent": 4, "text": ["Match By Attribute"], "extent": [5946, 5979], "body": [{"type": "para", "indent": 8, "text": ["Match points on the first input to corresponding points on the second input using a given point attribute. For example, if ", {"type": "ui", "text": ["Attribute To Match"]}, " is set to ", {"type": "code", "text": ["name"]}, ", then the points on the first input will be driven by the points on the second input that share the same name."], "extent": [5979, 6262]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "mapusing"}}, {"type": "dt", "indent": 0, "text": ["Mapping Attribute"], "extent": [6262, 6281], "body": [{"type": "para", "indent": 4, "text": ["The name of the dictionary point attribute on the first input to use for mapping."], "extent": [6309, 6396]}], "container": true, "attrs": {"id": "mappingattribname"}}, {"type": "dt", "indent": 0, "text": ["Attribute To Match"], "extent": [6396, 6416], "body": [{"type": "para", "indent": 4, "text": ["The name of the point attribute present on both inputs to be used to map points."], "extent": [6440, 6526]}], "container": true, "attrs": {"id": "attribtomatch"}}, {"type": "dt", "indent": 0, "text": ["clipchannels"], "extent": [6526, 6540], "body": [{"type": "para", "indent": 4, "text": ["This detail ", {"type": "code", "text": ["dict"]}, " attribute maps between a channel name and a ", {"type": "code", "text": ["dict"]}, " describing the attribute that stores the channel\u2019s value.\n    The channel\u2019s value can be stored in a detail attribute, or the point attribute value for a specific joint.\n    The channel names can contain characters that are not valid for attribute names."], "extent": [6563, 6893]}, {"type": "para", "indent": 4, "text": ["The valid keys for the channel options are:"], "extent": [6893, 6942]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["attrib"]}], "extent": [6942, 6956], "body": [{"type": "para", "indent": 8, "text": ["Specifies the name of a ", {"type": "code", "text": ["float"]}, " attribute containing the channel value.\n        If this key is not present, the attribute name is the same as the channel name."], "extent": [6956, 7125]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["attribclass"]}], "extent": [7125, 7144], "body": [{"type": "para", "indent": 8, "text": ["Specifies the attribute\u2019s class, which can be either ", {"type": "code", "text": ["detail"]}, " or ", {"type": "code", "text": ["point"]}, ".\n        If this key is not present, the attribute is assumed to be a detail attribute."], "extent": [7144, 7314]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["name"]}], "extent": [7314, 7326], "body": [{"type": "para", "indent": 8, "text": ["If the ", {"type": "code", "text": ["attribclass"]}, " is ", {"type": "code", "text": ["point"]}, ", specifies the name of the joint to read the attribute value from."], "extent": [7326, 7434]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "clipchannels"}}, {"type": "dt", "indent": 0, "text": ["blendshape_channel"], "extent": [7434, 7454], "body": [{"type": "para", "indent": 4, "text": ["Specifies the channel that provides the weight for the blend shape input."], "extent": [7483, 7562]}], "container": true, "attrs": {"id": "blendshape_channel"}}, {"type": "dt", "indent": 0, "text": ["blendshape_name"], "extent": [7562, 7579], "body": [{"type": "para", "indent": 4, "text": ["Specifies the name of the blend shape input (the standard ", {"type": "code", "text": ["name"]}, " attribute contains the name of the base shape that the input is associated with). This is primarily used for round-tripping from formats where the blend shape inputs are named."], "extent": [7605, 7852]}], "container": true, "attrs": {"id": "blendshape_name"}}, {"type": "dt", "indent": 0, "text": ["blendshape_inbetween_name"], "extent": [7852, 7879], "body": [{"type": "para", "indent": 4, "text": ["Specifies the name of the in-between shape.\n    In-between shapes have the same value for the ", {"type": "code", "text": ["name"]}, ", ", {"type": "code", "text": ["blendshape_name"]}, " and ", {"type": "code", "text": ["blendshape_channel"]}, " attributes as the hero blend shape that they are associated with.\n    This is primarily used for round-tripping from formats where the blend shape inputs are named."], "extent": [7915, 8230]}], "container": true, "attrs": {"id": "blendshape_inbetween_name"}}, {"type": "dt", "indent": 0, "text": ["blendshape_inbetween_weight"], "extent": [8230, 8259], "body": [{"type": "para", "indent": 4, "text": ["Specifies the weight at which the in-between shape is applied."], "extent": [8297, 8365]}], "container": true, "attrs": {"id": "blendshape_inbetween_weight"}}, {"type": "dt", "indent": 0, "text": ["Clip Range"], "extent": [8365, 8377], "body": [{"type": "para", "indent": 4, "text": ["Read the frame range from the ", {"type": "code", "text": ["clipinfo"]}, " detail attribute on the input geometry, or set a custom frame range."], "extent": [8401, 8516]}], "container": true, "attrs": {"id": "cliprangemode"}}, {"type": "dt", "indent": 0, "text": ["Frame Range"], "extent": [8516, 8529], "body": [{"type": "para", "indent": 4, "text": ["The custom frame range of the animation. This parameter is only available when ", {"type": "ui", "text": ["Clip Range"]}, " is set to ", {"type": "ui", "text": ["Custom Frame Range"]}, ". "], "extent": [8550, 8684]}, {"type": "para", "indent": 4, "text": ["Use the action button on this parameter to populate the values from either the ", {"type": "code", "text": ["clipinfo"]}, " detail attribute, the scene frame range, or the playback frame range."], "extent": [8684, 8849]}], "container": true, "attrs": {"id": "framerange"}}, {"type": "dt", "indent": 0, "text": ["Extract Transform"], "extent": [8849, 8868], "body": [{"type": "para", "indent": 4, "text": ["Determines the components of the matrix to affect for matrix attributes."], "extent": [8884, 8962]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Transform Order"], "extent": [8962, 8983], "body": [{"type": "para", "indent": 8, "text": ["Sets the order of transformations that is used when cracking and rebuilding transformation matrices."], "extent": [9002, 9112]}], "container": true, "attrs": {"id": "xOrd"}}, {"type": "dt", "indent": 4, "text": ["Rotation Order"], "extent": [9112, 9132], "body": [{"type": "para", "indent": 8, "text": ["Sets the order of rotations that is used when cracking and rebuilding transformation matrices."], "extent": [9151, 9255]}], "container": true, "attrs": {"id": "rOrd"}}], "container": true}], "container": true, "attrs": {"id": "crack"}}, {"type": "dt", "indent": 0, "text": ["Blend Type"], "extent": [9255, 9267], "body": [{"type": "para", "indent": 4, "text": ["Sets the type of blending function to use."], "extent": [9287, 9335]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Linear"], "extent": [9335, 9347], "body": [{"type": "para", "indent": 8, "text": ["Linear shape."], "extent": [9347, 9370]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Ease in Ease out"], "extent": [9370, 9392], "body": [{"type": "para", "indent": 8, "text": ["Smooth on entry and exit."], "extent": [9392, 9427]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Ease In"], "extent": [9427, 9440], "body": [{"type": "para", "indent": 8, "text": ["Smooth on entry."], "extent": [9440, 9466]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Ease Out"], "extent": [9466, 9480], "body": [{"type": "para", "indent": 8, "text": ["Smooth on exit."], "extent": [9480, 9505]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "blendtype"}}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" MotionClip viewport state interaction "], "extent": [9505, 9551], "body": [{"type": "para", "indent": 4, "text": ["You can select individual joints from the current pose in the MotionClip viewport state. For the selected joints, you can then use the ", {"type": "ui", "text": ["Evaluate Pose"]}, " mode to view just the current pose, its selected joints, and the motion trails for those joints."], "extent": [9585, 9840]}, {"type": "video_group", "body": [{"ext": null, "type": "video", "indent": 4, "role": "item", "extent": [9840, 9852], "body": [{"type": "summary", "indent": 8, "text": ["rFoot and lFoot joints selected, Mode = Evaluate Pose, Color = White to Red"], "extent": [9939, 10030]}], "container": true, "attrs": {"src": "/videos/kinefx_moclipviewstate_jointmotiontrail.mp4", "loop": "false"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "motionclipstateinteract"}}, {"level": 3, "type": "sep", "indent": 0, "text": [" MotionClip viewport state toolbar "], "extent": [10030, 10072], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Mode"], "extent": [10100, 10110], "body": [{"type": "para", "indent": 8, "text": ["Determines the MotionClip information that is displayed in the viewport."], "extent": [10136, 10218]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["MotionClip"], "extent": [10218, 10238], "body": [{"type": "para", "indent": 12, "text": ["Displays all the MotionClip\u2019s poses."], "extent": [10238, 10288]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 12, "text": [" ", {"scheme": "Image", "value": "/images/nodes/sop/kinefx_moclipviewstate_mode01.jpg", "type": "img", "text": ""}], "role": "item", "extent": [10288, 10366], "body": [{"type": "summary", "indent": 16, "text": ["Mode = MotionClip"], "extent": [10402, 10443]}], "container": true, "attrs": {"display": "left full"}}], "container": true, "role": "item_group"}], "container": true}, {"type": "dt", "indent": 8, "text": ["Evaluate Pose"], "extent": [10443, 10466], "body": [{"type": "para", "indent": 12, "text": ["Displays a single MotionClip pose at the current time."], "extent": [10466, 10534]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 12, "text": [" ", {"scheme": "Image", "value": "/images/nodes/sop/kinefx_moclipviewstate_mode02.jpg", "type": "img", "text": ""}], "role": "item", "extent": [10534, 10612], "body": [{"type": "summary", "indent": 16, "text": ["Mode = Evaluate Pose"], "extent": [10648, 10692]}], "container": true, "attrs": {"display": "left full"}}], "container": true, "role": "item_group"}], "container": true}], "container": true}], "container": true, "attrs": {"id": "moclip_mode"}}, {"type": "dt", "indent": 4, "text": ["Transparent MotionClip"], "extent": [10692, 10720], "body": [{"type": "para", "indent": 8, "text": ["When turned on, the MotionClip\u2019s poses are displayed as fainter lines, making it easier to see the scene behind the MotionClip, as well as the evaluated pose."], "extent": [10720, 10888]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Color"], "extent": [10888, 10899], "body": [{"type": "para", "indent": 8, "text": ["Applies the selected color ", {"scheme": null, "value": "/network/ramps", "type": "link", "text": ["ramp"], "fullpath": "/network/ramps.html"}, " preset to the MotionClip\u2019s visualization in the viewport. This color ramp helps to visualize changes to the MotionClip or individual poses over time."], "extent": [10926, 11134]}, {"type": "video_group", "body": [{"ext": null, "type": "video", "indent": 8, "role": "item", "extent": [11134, 11150], "body": [{"type": "summary", "indent": 12, "text": ["Mode = Evaluate Pose, Color = White to Red"], "extent": [11246, 11308]}], "container": true, "attrs": {"src": "/videos/kinefx_moclipviewstate_evaluateposecolor.mp4", "loop": "false"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "moclip_color"}}, {"type": "dt", "indent": 4, "text": ["Extend Color"], "extent": [11308, 11326], "body": [{"type": "para", "indent": 8, "text": ["Determines how the poses outside of the MotionClip\u2019s defined animation start and end range are visualized in the viewport."], "extent": [11359, 11491]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Hold"], "extent": [11491, 11505], "body": [{"type": "para", "indent": 12, "text": ["Holds the color values at the ends of the range."], "extent": [11505, 11567]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 12, "text": [" ", {"scheme": "Image", "value": "/images/nodes/sop/kinefx_moclipviewstate_extendcolorhold.jpg", "type": "img", "text": ""}], "role": "item", "extent": [11567, 11654], "body": [{"type": "summary", "indent": 16, "text": ["Mode = MotionClip, Color = Plasma, Extended Color = Hold"], "extent": [11690, 11770]}], "container": true, "attrs": {"display": "left full"}}], "container": true, "role": "item_group"}], "container": true}, {"type": "dt", "indent": 8, "text": ["Gray"], "extent": [11770, 11784], "body": [{"type": "para", "indent": 12, "text": ["Poses outside the animation start and end range are colored gray."], "extent": [11784, 11863]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 12, "text": [" ", {"scheme": "Image", "value": "/images/nodes/sop/kinefx_moclipviewstate_extendcolorgray.jpg", "type": "img", "text": ""}], "role": "item", "extent": [11863, 11950], "body": [{"type": "summary", "indent": 16, "text": ["Mode = MotionClip, Color = Plasma, Extended Color = Gray"], "extent": [11986, 12066]}], "container": true, "attrs": {"display": "left full"}}], "container": true, "role": "item_group"}], "container": true}, {"type": "dt", "indent": 8, "text": ["Hide"], "extent": [12066, 12080], "body": [{"type": "para", "indent": 12, "text": ["Hides the poses outside the animation start and end range."], "extent": [12080, 12152]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 12, "text": [" ", {"scheme": "Image", "value": "/images/nodes/sop/kinefx_moclipviewstate_extendcolorhide.jpg", "type": "img", "text": ""}], "role": "item", "extent": [12152, 12239], "body": [{"type": "summary", "indent": 16, "text": ["Mode = MotionClip, Color = Plasma, Extended Color = Hide"], "extent": [12275, 12354]}], "container": true, "attrs": {"display": "left full"}}], "container": true, "role": "item_group"}], "container": true}], "container": true}], "container": true, "attrs": {"id": "moclip_extendcolor"}}], "container": true}], "container": true, "attrs": {"id": "motioncliptoolbar"}}]}