{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "usdexport", "tags": "usd export", "icon": "SOP/usdexport", "since": "18.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["USD Export"], "extent": [0, 15]}, {"level": 0, "type": "title", "indent": 0, "text": ["USD Export"], "extent": [116, 131]}, {"type": "para", "indent": 0, "text": ["This node will export geometry from a SOP network directly into a USD file."], "extent": [131, 209]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [209, 221], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Configure"], "extent": [221, 238], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Import Group"], "extent": [10579, 10593], "body": [{"type": "para", "indent": 4, "text": ["Turn this on and specify a group name (or a space-separated list of ", {"scheme": null, "value": "/model/groups", "type": "link", "text": ["group syntax"], "fullpath": "/model/groups.html"}, ") to import. If you turn this on but leave the field blank, it imports all geometry."], "extent": [10609, 10795]}], "container": true, "attrs": {"id": "group"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import Group Type"], "extent": [10795, 10814], "body": [{"type": "para", "indent": 4, "text": ["When enabled, specifies the whether the ", {"type": "ui", "text": ["Import Group"]}, " is a point or primitive group."], "extent": [10834, 10927]}], "container": true, "attrs": {"id": "grouptype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import Path Prefix"], "extent": [10927, 10947], "body": [{"type": "para", "indent": 4, "text": ["If a prim being imported has an automatically generated name (like ", {"type": "code", "text": ["mesh_0"]}, ") because it had no path primitive, or if it has a path primitive but the path is relative (does not start with ", {"type": "code", "text": ["/"]}, "), the node automatically prefixes the name/path fragment with this path. This is a way of keeping ", {"type": "q", "text": ["un-pathed"]}, " prims organized under a single branch. (See ", {"scheme": null, "value": "/solaris/sop_import", "type": "link", "text": ["how to create geometry hierarchy"], "fullpath": "/solaris/sop_import.html"}, ".)"], "extent": [10968, 11375]}, {"type": "para", "indent": 4, "text": ["(The default is ", {"type": "code", "text": ["/$OS"]}, " which puts ", {"type": "q", "text": ["un-pathed"]}, " prims under a root prim with the name of this node.)"], "extent": [11375, 11479]}], "container": true, "attrs": {"id": "pathprefix"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Transform"], "extent": [360, 371], "body": [{"type": "para", "indent": 4, "text": ["Specifies whether the geometry should be transformed into world space before being written out.\n    This applies the object-level transform to the ", {"type": "ui", "text": ["Relative Path Prefix"]}, " prim and any other root prims in the generated USD stage."], "extent": [371, 606]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": "prim_def", "container": true, "type": "h", "indent": 0, "text": ["Primitive Definition"], "extent": [16, 54], "body": [{"type": "para", "indent": 0, "text": ["Parameters in this group guide the translation process in terms of how USD primitives are generated from the source SOP geometry."], "extent": [54, 186]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Packed USD Primitives"], "extent": [186, 209], "body": [{"type": "para", "indent": 4, "text": ["What to do with packed USD primitives in the imported SOP geometry."], "extent": [236, 313]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Ignore"], "extent": [313, 325], "body": [{"type": "para", "indent": 8, "text": ["Ignore packed USD primitives in the source SOP geometry."], "extent": [325, 391]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Overlay Transforms"], "extent": [391, 415], "body": [{"type": "para", "indent": 8, "text": ["Import the transformation of the packed USD primitive as an override (", {"type": "code", "text": ["Over"]}, ") prim. This makes it easy to transform the packed USD prims without unpacking them."], "extent": [415, 585]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Overlay Transforms and Attributes"], "extent": [585, 624], "body": [{"type": "para", "indent": 8, "text": ["In addition to ", {"type": "ui", "text": ["Overlay Transforms"]}, ", point or primitive SOP attributes on the packed USD primitive are imported as primvars with ", {"type": "code", "text": ["constant"]}, " interpolation."], "extent": [624, 790]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "packedusdhandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Other Primitives"], "extent": [790, 808], "body": [{"type": "para", "indent": 4, "text": ["What to do with regular non-packed primitives (points, curves, polygons, spheres, and so on)."], "extent": [835, 934]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Define"], "extent": [934, 946], "body": [{"type": "para", "indent": 8, "text": ["Create the USD prims for the imported geometry if they don\u2019t already exist. This is the standard way to import geometry."], "extent": [946, 1076]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Overlay"], "extent": [1076, 1089], "body": [{"type": "para", "indent": 8, "text": ["Create the USD prims as overrides. They will only be visible as changes to any prims that exist at a lower level with the same paths. This may be useful where you only want to import and modify certain attributes from SOPs onto existing USD geometry."], "extent": [1089, 1349]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Overlay Transforms"], "extent": [1349, 1373], "body": [{"type": "para", "indent": 8, "text": ["Like ", {"type": "q", "text": ["Overlay"]}, ", but only imports transform data."], "extent": [1373, 1431]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "otherprimhandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Define Only Leaf Primitives"], "extent": [1431, 1460], "body": [{"type": "para", "indent": 4, "text": ["Author intermediate primitives (for example, any ", {"type": "code", "text": ["Xform"]}, " prims created for the ", {"type": "ui", "text": ["Import path prefix"]}, ") as overrides instead of definitions. This means if they don\u2019t match up with underlying prims in lower layers, the leaf prims won\u2019t be added to the scene. This is useful if you only want to import the geometry if its ancestors already exist in the scene tree."], "extent": [1489, 1856]}, {"type": "para", "indent": 4, "text": ["(Note that all of the data is still imported, it just may not be visible in the scene graph tree or the viewport.)"], "extent": [1856, 1976]}], "container": true, "attrs": {"id": "defineonlyleafprims"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Packed Primitives"], "extent": [1976, 1995], "body": [{"type": "para", "indent": 4, "text": ["What to do with SOP-native packed primitives."], "extent": [2019, 2070]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Create Xforms"], "extent": [2070, 2089], "body": [{"type": "para", "indent": 8, "text": ["Creates an ", {"type": "code", "text": ["Xform"]}, " prim from the packed primitive\u2019s transform and attributes, and the packed primitive\u2019s geometry is imported underneath."], "extent": [2089, 2236]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create Native Instances"], "extent": [2236, 2265], "body": [{"type": "para", "indent": 8, "text": ["Import the geometry in packed primitives as ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["instanceable references"], "fullpath": "/solaris/usd.html#instancing", "fragment": "#instancing"}, ". This imports each piece as a prototype under a ", {"type": "code", "text": ["Prototypes"]}, " prim under the ", {"type": "ui", "text": ["Import Path Prefix"]}, " prim."], "extent": [2265, 2473]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create Point Instancer"], "extent": [2473, 2501], "body": [{"type": "para", "indent": 8, "text": ["Import the geometry in packed primitives as ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["point instanced geometry"], "fullpath": "/solaris/usd.html#instancing", "fragment": "#instancing"}, ". This imports each unique piece as a prototype under the point instancer prim."], "extent": [2501, 2684]}, {"type": "para", "indent": 8, "text": ["You can assign a SOP primitive attribute to the packed primitive named ", {"type": "code", "text": ["usdinstancerpath"]}, " to specify the USD scene graph path of the instancer."], "extent": [2684, 2837]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Unpack"], "extent": [2837, 2849], "body": [{"type": "para", "indent": 8, "text": ["Only imports the packed primitive\u2019s geometry.\n        Unlike the ", {"type": "ui", "text": ["Create Xforms"]}, " mode, this does not create any additional hierarchy, and is equivalent to ", {"scheme": "Node", "value": "/nodes/sop/unpack", "type": "link", "text": ["unpacking"], "fullpath": "/nodes/sop/unpack.html"}, " the packed primitive prior to being imported.\n        This can be useful for importing multiple pieces of geometry without merging their attributes."], "extent": [2849, 3192]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "packedhandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Agents"], "extent": [3192, 3200], "body": [{"type": "para", "indent": 4, "text": ["What to do with ", {"scheme": null, "value": "/crowds/agents", "type": "link", "text": ["agent primitives"], "fullpath": "/crowds/agents.html"}, ".\n    In all modes, a prim is created from the agent primitive\u2019s transform and attributes, and the agent\u2019s geometry and animation are imported underneath."], "extent": [3223, 3432]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Create Instanced SkelRoots"], "extent": [3432, 3464], "body": [{"type": "para", "indent": 8, "text": ["Imports the agent\u2019s skeleton and geometry as ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["instanceable references"], "fullpath": "/solaris/usd.html#instancing", "fragment": "#instancing"}, " to a ", {"type": "code", "text": ["SkelRoot"]}, " prim enclosing the skeleton and skinned primitives.\n        This imports each unique agent definition as a prototype under an ", {"type": "code", "text": ["agentdefinitions"]}, " prim under the ", {"type": "ui", "text": ["Import Path Prefix"]}, " prim."], "extent": [3464, 3773]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create SkelRoots"], "extent": [3773, 3795], "body": [{"type": "para", "indent": 8, "text": ["Creates a ", {"type": "code", "text": ["SkelRoot"]}, " prim enclosing the agent\u2019s skeleton and skinned geometry, which is imported underneath.\n        This will be less efficient than ", {"type": "ui", "text": ["Create Instanced SkelRoots"]}, " for a large crowd, but can be useful for e.g. importing a single character where instancing is unnecessary."], "extent": [3795, 4093]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create Instanced Skeletons"], "extent": [4093, 4125], "body": [{"type": "para", "indent": 8, "text": ["Imports the agent\u2019s skeleton as an ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["instanceable reference"], "fullpath": "/solaris/usd.html#instancing", "fragment": "#instancing"}, " to a ", {"type": "code", "text": ["Skeleton"]}, " prim.\n        This imports each unique agent definition as a prototype under an ", {"type": "code", "text": ["agentdefinitions"]}, " prim under the ", {"type": "ui", "text": ["Import Path Prefix"]}, " prim."], "extent": [4125, 4377]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create Skeletons"], "extent": [4377, 4399], "body": [{"type": "para", "indent": 8, "text": ["Imports the agent\u2019s skeleton as a ", {"type": "code", "text": ["Skeleton"]}, " prim under the agent\u2019s ", {"type": "code", "text": ["Xform"]}, " prim.\n        This will be less efficient than ", {"type": "ui", "text": ["Create Instanced Skeletons"]}, " for a large crowd, but can be useful for e.g. importing a single character where instancing is unnecessary."], "extent": [4399, 4670]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create SkelAnimations"], "extent": [4670, 4697], "body": [{"type": "para", "indent": 8, "text": ["Only imports the agent\u2019s joint animation, creating a ", {"type": "code", "text": ["SkelAnimation"]}, " prim.\n        This can be used to efficiently import a sequence of frames, since the agent\u2019s skeleton and rest geometry are typically unchanged between frames."], "extent": [4697, 4935]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "agenthandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["NURBS Curves"], "extent": [4935, 4949], "body": [{"type": "para", "indent": 4, "text": ["What to do with NURBS curve primitives."], "extent": [4977, 5022]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Convert to Basis Curves"], "extent": [5022, 5051], "body": [{"type": "para", "indent": 8, "text": ["Import the curves as a ", {"type": "code", "text": ["BasisCurves"]}, " primitive.\n        This only supports cubic curves, but is useful for ", {"scheme": null, "value": "/solaris/usd#render", "type": "link", "text": ["rendering through Hydra"], "fullpath": "/solaris/usd.html#render", "fragment": "#render"}, "."], "extent": [5051, 5214]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create NURBS Curves"], "extent": [5214, 5239], "body": [{"type": "para", "indent": 8, "text": ["Import the curves as a ", {"type": "code", "text": ["NurbsCurves"]}, " primitive.\n        This provides complete round-tripping of NURBS curves, but has limited support for ", {"scheme": null, "value": "/solaris/usd#rendering", "type": "link", "text": ["rendering through Hydra"], "fullpath": "/solaris/usd.html#rendering", "fragment": "#rendering"}, "."], "extent": [5239, 5437]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "nurbscurvehandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["NURBS Surfaces"], "extent": [5437, 5453], "body": [{"type": "para", "indent": 4, "text": ["What to do with NURBS surface primitives."], "extent": [5480, 5527]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Convert to Meshes"], "extent": [5527, 5550], "body": [{"type": "para", "indent": 8, "text": ["Import the surface as a ", {"type": "code", "text": ["Mesh"]}, " primitive, which can be useful for ", {"scheme": null, "value": "/solaris/usd#render", "type": "link", "text": ["rendering through Hydra"], "fullpath": "/solaris/usd.html#render", "fragment": "#render"}, "."], "extent": [5550, 5672]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create NURBS Patches"], "extent": [5672, 5698], "body": [{"type": "para", "indent": 8, "text": ["Import the surface as a ", {"type": "code", "text": ["NurbsPatch"]}, " primitive.\n        This can be useful for round-tripping of NURBS surfaces, but has limited support for ", {"scheme": null, "value": "/solaris/usd#rendering", "type": "link", "text": ["rendering through Hydra"], "fullpath": "/solaris/usd.html#rendering", "fragment": "#rendering"}, "."], "extent": [5698, 5898]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "nurbssurfhandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Kind Authoring"], "extent": [5898, 5914], "body": [{"type": "para", "indent": 4, "text": ["How to assign ", {"scheme": null, "value": "/solaris/usd#kinds", "type": "link", "text": ["kinds"], "fullpath": "/solaris/usd.html#kinds", "fragment": "#kinds"}, " to imported prims."], "extent": [5934, 5999]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["All Geometry is One Component"], "extent": [5999, 6034], "body": [{"type": "para", "indent": 8, "text": ["Set root primitives in the imported tree to Component. Do not set kinds on descendants."], "extent": [6034, 6131]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Nested Groups and Components"], "extent": [6131, 6165], "body": [{"type": "para", "indent": 8, "text": ["Set leaf primitives in the imported tree to Component. Set branch primitives to Group."], "extent": [6165, 6261]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Nested Assembly, Groups, and Components"], "extent": [6261, 6306], "body": [{"type": "para", "indent": 8, "text": ["Set root prims in the imported tree to Assembly. Set intermediate branch prims to Group. Set leaf prims to Component."], "extent": [6306, 6433]}], "container": true}, {"type": "dt", "indent": 4, "text": ["None"], "extent": [6433, 6443], "body": [{"type": "para", "indent": 8, "text": ["Do not set kinds on the imported prims."], "extent": [6443, 6492]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "kindschema"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Path Attributes"], "extent": [6492, 6509], "body": [{"type": "para", "indent": 4, "text": ["A (comma or space-separated) list of names of SOP ", {"type": "strong", "text": ["primitive string attributes"]}, " to use to use as prim paths to put the SOP geometry into. The default is ", {"type": "code", "text": ["path,name"]}, ". See ", {"scheme": null, "value": "#import", "type": "link", "text": ["geometry hierarchy"], "fullpath": "/nodes/lop/_sopimport_shared.html#import", "fragment": "#import"}, " above."], "extent": [6527, 6738]}, {"type": "para", "indent": 4, "text": ["If the list has more than one attribute, the importer checks each attribute for the first non-empty value."], "extent": [6738, 6850]}, {"type": "para", "indent": 4, "text": ["If the string value a full path, that path is used as the USD scene graph path for that primitive. If the string is a relative path (or just a name), the string is appended to the ", {"type": "ui", "text": ["Import Path Prefix"]}, " string to generate a full scene graph path."], "extent": [6850, 7102]}, {"type": "para", "indent": 4, "text": ["If none of the listed attributes exist on a given SOP primitive, or all values are an empty string, the importer generates a name automatically (for example, ", {"type": "code", "text": ["sphere_0"]}, ")."], "extent": [7102, 7278]}], "container": true, "attrs": {"id": "pathattr"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Prefix Absolute Paths"], "extent": [7278, 7301], "body": [{"type": "para", "indent": 4, "text": ["Whether absolute path values from ", {"type": "ui", "text": ["Path Attributes"]}, " should be prefixed/parented or not. By default this is off and only relative path values are prefixed."], "extent": [7330, 7492]}], "container": true, "attrs": {"id": "prefixabsolutepaths"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import HeightFields as Mesh"], "extent": [7492, 7521], "body": [{"type": "para", "indent": 4, "text": ["If the source SOP geometry contains a height field volume, it will be imported as polygonal mesh. Other layers will be imported as vertex primvar if the values are varying, or constant primvar if the values are constant."], "extent": [7549, 7775]}], "container": true, "attrs": {"id": "heightfieldconvert"}, "role": "item"}], "container": true}]}, {"level": 3, "id": "geom_handling", "container": true, "type": "h", "indent": 0, "text": ["Geometry Handling"], "extent": [7775, 7815], "body": [{"type": "para", "indent": 0, "text": ["These parameters provide options to alter the interpretation of the SOP geometry data."], "extent": [7815, 7904]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Treat Polygons as Subdivision Surfaces"], "extent": [7904, 7944], "body": [{"type": "para", "indent": 4, "text": ["For polygon meshes that are not already tagged with a subdivision scheme, author a ", {"type": "code", "text": ["subdivisionScheme"]}, " attribute set to ", {"type": "code", "text": ["catmullClark"]}, ". This will convert them to subdivision surfaces."], "extent": [7968, 8157]}], "container": true, "attrs": {"id": "polygonsassubd"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Subdivision Group"], "extent": [8157, 8176], "body": [{"type": "para", "indent": 4, "text": ["If ", {"type": "ui", "text": ["Treat Polygons as Subdivision Surfaces"]}, " is on, only convert polygons in this primitive ", {"scheme": null, "value": "/model/groups", "type": "link", "text": ["group"], "fullpath": "/model/groups.html"}, " into subdivision surfaces."], "extent": [8195, 8342]}], "container": true, "attrs": {"id": "subdgroup"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reverse Polygon Vertex Ordering"], "extent": [8342, 8375], "body": [{"type": "para", "indent": 4, "text": ["USD supports an ", {"type": "code", "text": ["orientation"]}, " attribute on mesh primitives that indicates whether polygons have a left-handed or right-handed ordering, while SOP geometry is always left-handed ordering. When this option is on, the importer always reorders vertices (and associated primvars) to be right-handed."], "extent": [8400, 8700]}, {"type": "para", "indent": 4, "text": ["This is useful when round tripping right-handed oriented polygons from USD into SOPs and back into USD. The data is always converted to a left handed ordering when importing it into SOPs. If you imported the polygons back into USD without this option, they would be left-handed, unlike the original."], "extent": [8700, 9006]}], "container": true, "attrs": {"id": "reversepolygons"}, "role": "item"}], "container": true}]}, {"level": 3, "id": "import_data", "container": true, "type": "h", "indent": 0, "text": ["Import Data"], "extent": [9006, 9038], "body": [{"type": "para", "indent": 0, "text": ["These parameters affect the conversion of SOP geometry attributes into USD attributes and primvars, and the choice between default and time sampled value authoring."], "extent": [9038, 9205]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Author Time Samples"], "extent": [9205, 9226], "body": [{"type": "para", "indent": 4, "text": ["Whether values imported from SOPs should be authored as default values for the corresponding USD attributes, or as a time sample (at the time in the timeline)."], "extent": [9253, 9418]}, {"type": "para", "indent": 4, "text": ["(When the USD system is asked for an attribute value, it returns the default if no time samples exist on the attribute. Otherwise it returns a value interpolated from the time sample data.)"], "extent": [9418, 9613]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["If SOP is Time Dependent"], "extent": [9613, 9643], "body": [{"type": "para", "indent": 8, "text": ["If the SOP node the geometry comes from is time-dependent (is animated or contains animated values), write time samples. Otherwise, write defaults."], "extent": [9643, 9800]}], "container": true}, {"type": "dt", "indent": 4, "text": ["If Not Specifically Excluded"], "extent": [9800, 9834], "body": [{"type": "para", "indent": 8, "text": ["Author all values as time samples except for attributes listed in the ", {"type": "ui", "text": ["Single Value Attributes"]}, " parameter."], "extent": [9834, 9952]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Never"], "extent": [9952, 9963], "body": [{"type": "para", "indent": 8, "text": ["Author all values as defaults."], "extent": [9963, 10003]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["(This is the only parameter on this node you can\u2019t pre-configure on the geometry with the ", {"scheme": "Node", "value": "/nodes/sop/usdconfigure", "type": "link", "text": ["USD Configure SOP"], "fullpath": "/nodes/sop/usdconfigure.html"}, ". This is because it requires a ", {"type": "q", "text": ["live"]}, " SOP, not just attribute values embedded in the geometry.)"], "extent": [10003, 10236]}], "container": true, "attrs": {"id": "authortimesamples"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Topology Attributes"], "extent": [10236, 10257], "body": [{"type": "para", "indent": 4, "text": ["Controls whether USD topology attributes should be authored as time sampled or default values."], "extent": [10283, 10383]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Animated"], "extent": [10383, 10397], "body": [{"type": "para", "indent": 8, "text": ["If you know that topology is changing in the source geometry over time, choose this option to record topology attributes as time samples in the USD scene graph. Having animated topology can be very expensive during playback, so only use this option when necessary."], "extent": [10397, 10671]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Static"], "extent": [10671, 10683], "body": [{"type": "para", "indent": 8, "text": ["Write topology attributes as default values. This can make playback much faster, but limits how the topology can change over time."], "extent": [10683, 10823]}], "container": true}, {"type": "dt", "indent": 4, "text": ["None"], "extent": [10823, 10833], "body": [{"type": "para", "indent": 8, "text": ["Do not author topology attributes."], "extent": [10833, 10877]}, {"type": "para", "indent": 8, "text": ["This is useful when USD data is sent to SOPs for processing, then brought back into LOPs. Using this option tells the importer that the geometry topology has not changed in this process, so only the changing point positions or other primvars will be imported."], "extent": [10877, 11146]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "topologyhandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attributes"], "extent": [11146, 11158], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which SOP attributes to import into USD as primvars."], "extent": [11175, 11295]}, {"type": "para", "indent": 4, "text": ["In addition to matching attribute names directly, there are some values with special meanings:"], "extent": [11295, 11395]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["bounds"]}], "extent": [11395, 11409], "body": [{"type": "para", "indent": 8, "text": ["Authors the USD ", {"type": "code", "text": ["extent"]}, " attribute using the calculated bounding box of the associated SOP geometry."], "extent": [11409, 11519]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["visibility"]}], "extent": [11519, 11537], "body": [{"type": "para", "indent": 8, "text": ["Authors the USD visibility attribute based on the value of the ", {"type": "code", "text": ["usdvisibility"]}, " geometry attribute."], "extent": [11537, 11645]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["See ", {"scheme": null, "value": "/solaris/sop_import#attrs", "type": "link", "text": ["importing attributes"], "fullpath": "/solaris/sop_import.html#attrs", "fragment": "#attrs"}, " for information on how the importer deals converts certain well-known Houdini attributes to their USD equivalents."], "extent": [11645, 11818]}], "container": true, "attrs": {"id": "attribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Indexed Attributes"], "extent": [11818, 11838], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which SOP attributes to import into USD as indexed primvars."], "extent": [11860, 11988]}, {"type": "para", "indent": 4, "text": ["If a SOP attribute matches this pattern, the importer authors the primvar as an indexed array of values (that is, an array of values call ", {"type": "code", "text": ["primvars:", {"type": "var", "text": ["name"]}]}, ", and an array of indices into those values called ", {"type": "code", "text": ["primvars:", {"type": "var", "text": ["name"]}, ":indices"]}, ")."], "extent": [11988, 12231]}, {"type": "para", "indent": 4, "text": ["Preparing an indexed primvar can be expensive for attributes that are not integers or strings. You should only use indexed primvars where it is likely to result in significant savings in storage size due to a small number of unique values being used across a large number of components."], "extent": [12231, 12523]}], "container": true, "attrs": {"id": "indexattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import as Single Element Array"], "extent": [12523, 12555], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which SOP attributes to import into USD as primvars with ", {"type": "code", "text": ["Constant"]}, " interpolation (an array with a single value for the whole primitive), regardless of whether the SOP geometry attribute is a point, primitive, or vertex attribute. If multiple values could be chosen for a particular USD primitive, the importer chooses the first value it encounters.\n    Importing as a single element array (versus ", {"type": "ui", "text": ["Import as Single Value"]}, ") can be useful since it allows the primvar\u2019s interpolation to be overridden without changing the primvar\u2019s type."], "extent": [12580, 13185]}], "container": true, "attrs": {"id": "constantattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import as Single Value"], "extent": [13185, 13209], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which SOP attributes to import into USD as primvars with ", {"type": "code", "text": ["Constant"]}, " interpolation and a single value for the whole primitive, regardless of whether the SOP geometry attribute is a point, primitive, or vertex attribute. If multiple values could be chosen for a particular USD primitive, the importer chooses the first value it encounters.\n    This is the default behavior for how detail attributes are imported.\n    This is similar to ", {"type": "ui", "text": ["Import as Single Element Array"]}, ", but the primvar\u2019s type is a scalar value instead of an array with a single element (for example, ", {"type": "code", "text": ["vector3f"]}, " instead of ", {"type": "code", "text": ["vector3f[]"]}, ")."], "extent": [13240, 13911]}], "container": true, "attrs": {"id": "scalarconstantattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Boolean Attributes"], "extent": [13911, 13931], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which integer SOP attributes should be converted to primvars of type ", {"type": "code", "text": ["bool"]}, "."], "extent": [13952, 14096]}], "container": true, "attrs": {"id": "boolattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Set Default Values"], "extent": [14096, 14116], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which SOP attributes to always author as default values for USD primvars (never time samples). This is the list of exclusions when ", {"type": "ui", "text": ["Author Time Samples"]}, " is set to ", {"type": "q", "text": ["If Not Specifically Excluded"]}, "."], "extent": [14139, 14403]}], "container": true, "attrs": {"id": "staticattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Partition Attributes"], "extent": [14403, 14425], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which SOP primitive string attributes represent subsets of the geometry. For mesh and curve primitives, the importer puts elements with the same value for this attribute into their own geometry subsets."], "extent": [14451, 14721]}, {"type": "para", "indent": 4, "text": ["The importer will try to set the subset name to the attribute value, but may need to change the name make it a legal USD primitive name. The importer stores the raw attribute value on the geometry subset prim as Custom Data with the key ", {"type": "code", "text": ["partitionValue"]}, "."], "extent": [14721, 14981]}], "container": true, "attrs": {"id": "partitionattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Prefix Subsets with Attribute Name"], "extent": [14981, 15017], "body": [{"type": "para", "indent": 4, "text": ["When creating subsets from ", {"type": "ui", "text": ["Partition Attributes"]}, ", the subsets are named by combining the attribute name with the partition attribute\u2019s value (a string or integer).\n    This avoids name collisions when multiple partition attributes contain the same values, but can be undesirable if precise control of the subset names is required.\n    For string attributes, if this option is disabled the attribute values will be directly used as the subset names."], "extent": [15049, 15506]}], "container": true, "attrs": {"id": "prefixpartitionsubsets"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Subset Groups"], "extent": [15506, 15521], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of group names/patterns specifying SOP primitive ", {"scheme": null, "value": "/model/groups", "type": "link", "text": ["groups"], "fullpath": "/model/groups.html"}, ". SOP polygon and curve primitives in each group will be imported as a geometry subset, named for the group."], "extent": [15543, 15751]}], "container": true, "attrs": {"id": "subsetgroups"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["USD Custom Attributes"], "extent": [15751, 15774], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which SOP attributes to import into USD as attributes (rather than primvars)."], "extent": [15797, 15942]}], "container": true, "attrs": {"id": "customattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Translate UV Attribute to ST"], "extent": [15942, 15972], "body": [{"type": "para", "indent": 4, "text": ["Convert the SOP vertex attribute ", {"type": "code", "text": ["uv"]}, " into a USD primvar called ", {"type": "code", "text": ["primvars:st"]}, ". Whether you need to turn this on depends on which renderer you are using and how your shaders are authored. If you are rendering with Karma, leave this off."], "extent": [15997, 16238]}, {"type": "para", "indent": 4, "text": ["(As of this writing there is no strict standard for texture coordinate naming in USD, but the use of ", {"type": "code", "text": ["st"]}, " is a common convention, whereas in SOP geometry, using ", {"type": "code", "text": ["uv"]}, " is the common convention.)"], "extent": [16238, 16435]}], "container": true, "attrs": {"id": "translateuvtost"}, "role": "item"}], "container": true}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Export"], "extent": [735, 748], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Save to Disk"], "extent": [1440, 1455], "body": [{"type": "para", "indent": 8, "text": ["Click to write out the layers generated by a LOP network to USD files."], "extent": [1477, 1557]}], "container": true, "attrs": {"id": "execute"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Save to Disk in Background"], "extent": [1557, 1585], "body": [{"type": "para", "indent": 8, "text": ["Starts another copy of Houdini in the background and instructs that copy to cook and save the USD files generated by the LOP network.  This allows one to continue working in the current Houdini session."], "extent": [1617, 1829]}], "container": true, "attrs": {"id": "executebackground"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Controls"], "extent": [1829, 1839], "body": [{"type": "para", "indent": 8, "text": ["Click to open a dialog that lets you launch a ", {"type": "q", "text": ["one-off"]}, " render with different frame range and dependency settings."], "extent": [1866, 1990]}], "container": true, "attrs": {"id": "renderdialog"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Valid Frame Range"], "extent": [1990, 2009], "body": [{"type": "para", "indent": 8, "text": ["See ", {"scheme": null, "value": "#anim", "type": "link", "text": ["saving animation"], "fullpath": "/nodes/out/usd.html#anim", "fragment": "#anim"}, " above for more information."], "extent": [2030, 2096]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Render Current Frame"], "extent": [2096, 2126], "body": [{"type": "para", "indent": 16, "text": ["Render the current frame number (in the playbar)."], "extent": [2126, 2193]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Render Frame Range"], "extent": [2193, 2221], "body": [{"type": "para", "indent": 16, "text": ["Render each frame in the range set by the ", {"type": "ui", "text": ["Start/End/Inc"]}, " parameters below. The ", {"type": "ui", "text": ["Flush Data After Each Frame"]}, " parameter controls whether to write out data to disk after each frame, or to generate animated data in memory before writing out all the data at once."], "extent": [2221, 2503]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Render Frame Range (Strict)"], "extent": [2503, 2540], "body": [{"type": "para", "indent": 16, "text": ["The ", {"type": "q", "text": ["Render Frame Range"]}, " option may generate frames outside the given range if they're requested by a render dependency. If you choose this option, this node will never render frames outside the given range."], "extent": [2540, 2765]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Render Frame Range From Stage"], "extent": [2765, 2804], "body": [{"type": "para", "indent": 16, "text": ["Examines the USD stage of the source LOP node for a start and end timecode value. These are used as the start and end of the frame range to save to disk. If the stage does not have this metadata set, executing a save operation will result in an error."], "extent": [2804, 3073]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "trange"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Start/End/Inc"], "extent": [3073, 3088], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Valid frame range"]}, " is ", {"type": "q", "text": ["Render frame range"]}, " or ", {"type": "q", "text": ["Render frame range (strict)"]}, ", the start and end frames (inclusive) and interval."], "extent": [3104, 3249]}], "container": true, "attrs": {"id": "f"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Render with Take"], "extent": [3489, 3507], "body": [{"type": "para", "indent": 8, "text": ["Render with the parameter values stored in this ", {"scheme": null, "value": "/basics/takes", "type": "link", "text": ["take"], "fullpath": "/basics/takes.html"}, "."], "extent": [3526, 3605]}], "container": true, "attrs": {"id": "take"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output File"], "extent": [3837, 3850], "body": [{"type": "para", "indent": 8, "text": ["The ", {"type": "q", "text": ["top-level"]}, " USD file to write the root layer to. Other layers that have file path metadata set will be written to their own USD files. A default output processor (see below) translates external file references in nodes to be relative to this file\u2019s directory, as is recommended."], "extent": [3874, 4166]}], "container": true, "attrs": {"id": "lopoutput"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Flush Data After Each Frame"], "extent": [7241, 7270], "body": [{"type": "para", "indent": 8, "text": ["When this is on, the node writes out each frame\u2019s data to disk before cooking the LOP Network to generate the next frame of data. When this is off (the default), the node cooks the data for all frames into memory and writes out the animated files all at once. Turning on this option ensures that only a single frame worth of data is in RAM at any one time, allowing arbitrarily large USD files to be created. But saving each frame can be slightly slower, and the generated files may be larger because of the way USD files append new data to an existing file. See ", {"scheme": null, "value": "#anim", "type": "link", "text": ["saving animation"], "fullpath": "/nodes/out/usd.html#anim", "fragment": "#anim"}, " above."], "extent": [7297, 7901]}, {"type": "para", "indent": 8, "text": ["When this option is on, this ROP can also generate separate USD files for each frame. To do this, embed the local variable for the current frame number in the ", {"type": "ui", "text": ["Output file"]}, " path (and other layer save paths) so each frame will write out files with unique names. For example:"], "extent": [7901, 8186]}, {"lang": null, "type": "pre", "indent": 8, "text": ["\n        $HIP/usd/scene_$F4.usd\n        "], "extent": [8186, 8241]}, {"type": "para", "indent": 8, "text": ["See ", {"scheme": null, "value": "/render/expressions", "type": "link", "text": ["expression in filenames"], "fullpath": "/render/expressions.html"}, " for more information."], "extent": [8241, 8323]}], "container": true, "attrs": {"id": "fileperframe"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Track Primitive Existence to Set Visibility"], "extent": [8323, 8368], "body": [{"type": "para", "indent": 8, "text": ["LOP networks may generate vastly different scene graphs from one frame to the next. When combining these scene graphs over a frame range into a single animated scene graph, the set of primitives in the combined scene graph will be the union of the primitives in each frame\u2019s hierarchy. But if a mesh appears at frame 50, this generally means that it is desired for this mesh to not be visible prior to frame 50. Enable this option to cause this node to track a list of all primitives at each frame, and automatically author animated visibility attributes for any primitives that are added to or removed from the scene graph over time. This gives the appearance of primitives being added and removed over time."], "extent": [8401, 9120]}, {"type": "para", "indent": 8, "text": ["Only subclasses of ", {"type": "code", "text": ["UsdGeomImageable"]}, " primitives will be tracked this way, since these are the only USD primitive types which respect the visibility attribute."], "extent": [9120, 9289]}], "container": true, "attrs": {"id": "trackprimexistence"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Network Drive Safe Save (Windows Only)"], "extent": [9289, 9333], "body": [{"type": "para", "indent": 8, "text": ["When running on Windows, the USD library often has issues saving layers to network mounted drives when those layers are currently loaded into a USD stage. This can make it impossible to overwrite a USD layer that is in use, even by the current Houdini session. This option works around this issue by having the USD ROP mute each layer right before ti is saved to disk (but only when running under Windows - on Linux and MacOS this parameter has no effect). Once the layer is saved, it is un-muted. This approach incurs a performance penalty as any stages using this layer will be recomposed twice instead of once. But in some settings this can make the save process much more robust."], "extent": [9366, 10059]}], "container": true, "attrs": {"id": "usenetworksafesave"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Relative Paths"], "extent": [1114, 1134], "body": [{"type": "para", "indent": 4, "text": ["This processor changes absolute file paths to relative paths in layer files. This allows you to use paths such as ", {"type": "code", "text": ["$HIP/usd/foo.usd"]}, " for loading, but have them written out as paths relative to the source file. This is recommended practice so you probably do not want to remove this processor."], "extent": [1134, 1432]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Layer metadata"], "extent": [16838, 16859], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Default Primitive"], "extent": [16893, 16920], "body": [{"type": "para", "indent": 16, "text": ["Set this to the ", {"type": "strong", "text": ["name"]}, " of a root primitive on the current stage to set it as the ", {"scheme": null, "value": "/solaris/usd#default_prim", "type": "link", "text": ["default primitive"], "fullpath": "/solaris/usd.html#default_prim", "fragment": "#default_prim"}, " for the top-level file."], "extent": [16920, 17088]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Error Saving Layer With No Default Primitive"], "extent": [17088, 17142], "body": [{"type": "para", "indent": 16, "text": ["When this is on, the render node will error and stop cooking if you haven\u2019t specified a ", {"scheme": null, "value": "/solaris/usd#default_prim", "type": "link", "text": ["default primitive"], "fullpath": "/solaris/usd.html#default_prim", "fragment": "#default_prim"}, " for all layers being written out."], "extent": [17183, 17368]}, {"type": "para", "indent": 16, "text": ["This is a way to force yourself to make sure layers have default prims, so you know you can reference in files without having to manually specify a top-level prim."], "extent": [17368, 17549]}], "container": true, "attrs": {"id": "requiredefaultprim"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Save ROP\u2019s Time Information to Output"], "extent": [17549, 17596], "body": [{"type": "para", "indent": 16, "text": ["Write the start and end frames, as well as the current frames per second setting, to the top-level output file."], "extent": [17631, 17760]}], "container": true, "attrs": {"id": "savetimeinfo"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Clear Houdini-Specific Custom Data"], "extent": [17760, 17804], "body": [{"type": "para", "indent": 16, "text": ["LOP networks often attach Houdini-specific custom data to layers, prims, and properties. Houdini does not need this data to be stored on disk (usually it is related to how to write files), so by default Houdini strips out this data before saving. Normally there\u2019s no reason to turn this parameter off (it\u2019s possible it might help SideFX diagnosing a problem)."], "extent": [17849, 18226]}], "container": true, "attrs": {"id": "clearhoudinicustomdata"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Ensure Basic Metrics are Set on All Layers"], "extent": [18226, 18278], "body": [{"type": "para", "indent": 16, "text": ["This options ensures that the ", {"type": "code", "text": ["upAxis"]}, " and ", {"type": "code", "text": ["metersPerUnit"]}, " metadata is set in every USD file written to disk. If a value has not been explicitly authored on a layer by the LOP Network, the default up axis and meters per unit values from the Lighting Preferences are used."], "extent": [18317, 18607]}], "container": true, "attrs": {"id": "ensuremetricsset"}, "role": "item"}], "container": true, "role": "item_group"}], "attrs": {"id": "layermetadata_group"}}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Context options"], "extent": [18607, 18629], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Set ROP Cook Context Options"], "extent": [18665, 18703], "body": [{"type": "para", "indent": 16, "text": ["Controls whether this node sets the ", {"type": "code", "text": ["@ropcook"]}, ", ", {"type": "code", "text": ["@ropstart"]}, ", ", {"type": "code", "text": ["@ropend"]}, ", and ", {"type": "code", "text": ["@ropinc"]}, " context options when rendering. If enabled, these context options are automatically set to ", {"type": "code", "text": ["1"]}, " for ", {"type": "code", "text": ["@ropcook"]}, ", and the values of the Start, End, and Increment Frame values from this node for ", {"type": "code", "text": ["@ropstart"]}, ", ", {"type": "code", "text": ["@ropend"]}, ", and ", {"type": "code", "text": ["@ropinc"]}, ". Using these standard context options it is easier to set up predictable behavior for Cache LOPs, LOPs that create ranges of time sampled values, and LOP nodes that are only used for generating viewport previews or final rendered output."], "extent": [18736, 19306]}], "container": true, "attrs": {"id": "setropcook"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Number of Options"], "extent": [19306, 19333], "body": [{"type": "para", "indent": 16, "text": ["Lets you specify context options that only apply while writing out files from this node. Set the number of context options to define/override, or use the plus and minus buttons to add or remove options."], "extent": [19367, 19587]}, {"type": "para", "indent": 16, "text": ["You could have two separate USD render nodes with different context options, so they would write out different USD from the same LOP network depending on uses of ", {"type": "code", "text": ["@contextoption"]}, " references in expressions. This could be useful for wedging, or to cause the LOP network to configure the stage in ways that are not good for interactively, but should be written to disk."], "extent": [19587, 19971]}], "container": true, "attrs": {"id": "optioncount"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Option Name"], "extent": [19971, 19992], "body": [{"type": "para", "indent": 16, "text": ["For each option, the name of the option. You can reference this option in an expression using ", {"type": "code", "text": ["@", {"type": "var", "text": ["name"]}]}, "."], "extent": [20024, 20148]}], "container": true, "attrs": {"id": "optionname"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Option Type"], "extent": [20148, 20169], "body": [{"type": "para", "indent": 16, "text": ["For each option, the type of data stored in the option, either a floating point number of a string."], "extent": [20202, 20319]}], "container": true, "attrs": {"id": "optiontype"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Option Value"], "extent": [20319, 20341], "body": [{"type": "para", "indent": 16, "text": ["For each option, the value of the option (while this node writes out USD)."], "extent": [20375, 20467]}], "container": true, "attrs": {"id": "optionvalue"}, "role": "item"}], "container": true, "role": "item_group"}], "attrs": {"id": "contextoptions_group2"}}, {"level": 3, "id": "scripts_tab", "container": true, "type": "h", "indent": 0, "text": ["Scripts"], "extent": [7038, 7066], "body": [{"type": "para", "indent": 4, "text": ["A script command can be specified for execution at various execution\n    points. The expression language selected for the script parameter determines\n    whether the command is in hscript or python."], "extent": [7066, 7271]}, {"type": "para", "indent": 4, "text": ["Prior to execution, this node is automatically set as the global current\n    node."], "extent": [7271, 7359]}, {"type": "para", "indent": 4, "text": ["To run statements from a file, specify the path to the file with\n    either a ", {"type": "code", "text": [".cmd"]}, " extension (when the language is set to ", {"type": "ui", "text": ["Hscript"]}, ") or a ", {"type": "code", "text": [".py"]}, "\n    extension (when the language is set to ", {"type": "ui", "text": ["Python"]}, "). Additional arguments to the\n    script can also be supplied. They will be parsed in a shell-like manner."], "extent": [7359, 7673]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Pre-Render Script"], "extent": [7673, 7696], "body": [{"type": "para", "indent": 8, "text": ["Run this script before any rendering."], "extent": [7696, 7743]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Pre-Frame Script"], "extent": [7743, 7765], "body": [{"type": "para", "indent": 8, "text": ["Run this script before each frame."], "extent": [7765, 7809]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Post-Frame Script"], "extent": [7809, 7832], "body": [{"type": "para", "indent": 8, "text": ["Run this script after each frame."], "extent": [7832, 7875]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Post-Render Script"], "extent": [7875, 7899], "body": [{"type": "para", "indent": 8, "text": ["Run this script after all rendering."], "extent": [7899, 7945]}], "container": true, "role": "item"}], "container": true}]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Initialize Simulation OPs"], "extent": [20499, 20526], "body": [{"type": "para", "indent": 4, "text": ["Initialize DOP simulations before rendering."], "extent": [20548, 20598]}], "container": true, "attrs": {"id": "initsim"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Alfred Style Progress"], "extent": [20598, 20621], "body": [{"type": "para", "indent": 8, "text": ["Print percentage complete value as files are written. This is in the style expected by Pixar\u2019s Alfred render queue."], "extent": [20647, 20772]}], "container": true, "attrs": {"id": "alfprogress"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Report Network Use"], "extent": [20772, 20792], "body": [{"type": "para", "indent": 8, "text": ["Print the number of bytes sent or received by the distributed simulation nodes during cooks triggered by this node."], "extent": [20820, 20949]}, {"type": "para", "indent": 4, "text": ["This does not track network usage from, for example, saving a file to an NFS mount. It only tracks the network communication of distributed Houdini nodes."], "extent": [20949, 21112]}], "container": true, "attrs": {"id": "reportnetwork"}, "role": "item"}], "container": true, "role": "item_group"}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [1676, 1685], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/sop/usdimport", "type": "link", "text": "", "fullpath": "/nodes/sop/usdimport.html"}], "extent": [1685, 1712]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/lop/sopimport", "type": "link", "text": "", "fullpath": "/nodes/lop/sopimport.html"}], "extent": [1712, 1739]}], "container": true}], "text": "Related"}], "title": ["USD Export"], "included": ["/nodes/lop/_sopimport_shared", "/nodes/lop/reference", "/nodes/lop/sopimport", "/nodes/out/standard", "/nodes/out/usd", "/solaris/output", "/solaris/usd"]}