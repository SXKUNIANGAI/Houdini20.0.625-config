{"type": "root", "attrs": {"type": "node", "context": "sop", "namespace": "kinefx", "internal": "dembones_skinningconverter", "icon": "SOP/kinefx-dembones_skinningconverter", "tags": "animation", "since": "20", "version": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Dem Bones Skinning Converter"], "extent": [157, 190]}, {"type": "summary", "indent": 0, "text": ["Generates and assigns capture weights to points based on the Smooth Skinning Decomposition with Rigid Bones algorithm."], "extent": [190, 317]}, {"type": "para", "indent": 0, "text": ["Dem Bones - \u00a9 Electronic Arts 2019"], "extent": [317, 353]}, {"type": "para", "indent": 0, "text": ["This node creates captures weights on geometry that is to be deformed by the ", {"scheme": "Node", "value": "/nodes/sop/bonedeform", "type": "link", "text": "", "fullpath": "/nodes/sop/bonedeform.html"}, " SOP. They are computed using an implementation of ", {"type": "em", "text": ["Smooth Skinning Decomposition with Rigid Bones"]}, ", \nan automated algorithm that extracts the Linear Blend Skinning (LBS) with bone transformations from a set of example meshes."], "extent": [353, 679]}, {"type": "para", "indent": 0, "text": ["Skinning decomposition can be used in various tasks:"], "extent": [679, 732]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Converting any animated mesh sequence. For example, geometry cache to LBS, which can then be played back in popular game engines."], "extent": [732, 864]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Solving skin weights from shapes and skeleton poses. For example, converting blend shapes to LBS."], "extent": [864, 964]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Solving bone transformations for a mesh animation by providing skin weights."], "extent": [964, 1044]}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [1044, 1050], "body": [{"type": "para", "indent": 4, "text": ["This node can only handle clean input data. For example, only one piece of connected geometry. If this node takes a really long time to process, then it may have gotten stuck while trying to find a solution. To fix this, set the ", {"scheme": null, "value": "#nnz", "type": "link", "text": ["Min Non-Zero Weights"], "fullpath": "/nodes/sop/kinefx--dembones_skinningconverter.html#nnz", "fragment": "#nnz"}, " parameter to 1."], "extent": [1050, 1328]}], "container": true}], "container": true, "role": "item_group"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1328, 1340], "body": [{"level": 3, "type": "sep", "indent": 0, "text": [" Conversion Settings "], "extent": [1340, 1369], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Input Animated Cache"], "extent": [1369, 1396], "body": [{"type": "para", "indent": 8, "text": ["Specifies the path to the Alembic geometry cache that contains the animated mesh sequence used to compute skinning weights."], "extent": [1425, 1558]}], "container": true, "attrs": {"id": "sAnimatedCache"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Bones "], "extent": [1558, 1572], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Max Number of Bones"], "extent": [1572, 1598], "body": [{"type": "para", "indent": 8, "text": ["Specifies the maximum number of bones that can be generated. "], "extent": [1619, 1690]}, {"type": "note_group", "body": [{"type": "note", "indent": 8, "role": "item", "extent": [1690, 1704], "body": [{"type": "para", "indent": 12, "text": ["Due to the possibility that more efficient solutions may be found during conversion, the actual output may be lower than the number specified by this parameter."], "extent": [1704, 1878]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "nBones"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Solver Iterations "], "extent": [1878, 1904], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Global Iterations"], "extent": [1904, 1932], "body": [{"type": "para", "indent": 8, "text": ["Specifies the number of global iterations to be processed during the conversion. Functions as a scalar for the number of optimizations that have to be calculated. For more complex scenes, increase ", {"type": "ui", "text": ["Global Iterations"]}, ". "], "extent": [1953, 2183]}], "container": true, "attrs": {"id": "nlters"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Error Tolerance"], "extent": [2183, 2204], "body": [{"type": "para", "indent": 8, "text": ["The algorithm keeps track of the decreasing errors during iterations, and will increment a counter if the reduction is less than the threshold specified by this parameter. This allows the algorithm to stop optimizing early if no improvement has been found after the number of iterations specified by the ", {"type": "ui", "text": ["Patience"]}, " parameter."], "extent": [2228, 2565]}], "container": true, "attrs": {"id": "tolerance"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Patience"], "extent": [2565, 2579], "body": [{"type": "para", "indent": 8, "text": ["Specifies the number of iterations to wait before stopping early when no improvement has been found that is incrementally better than the threshold specified by the ", {"type": "ui", "text": ["Error Tolerance"]}, " parameter."], "extent": [2602, 2807]}], "container": true, "attrs": {"id": "patience"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Splitting Iterations"], "extent": [2807, 2833], "body": [{"type": "para", "indent": 8, "text": ["Specifies the number of clustering update iterations that are applied on initalization. "], "extent": [2858, 2956]}], "container": true, "attrs": {"id": "nlnitlters"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Transform Iterations"], "extent": [2956, 2982], "body": [{"type": "para", "indent": 8, "text": ["Specifies the number of bone transformation update iterations per global iteration. DemBones performs multiple bone transform updates after each weights update."], "extent": [3008, 3178]}], "container": true, "attrs": {"id": "nTranslters"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Soft Constraints "], "extent": [3178, 3203], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Translations Affinity"], "extent": [3203, 3231], "body": [{"type": "para", "indent": 8, "text": ["Activates a soft constraint that forces bone translation that follows the centroid of the patch supported by that bone. Values greater than 0 turn on the soft constraint, whereas values less than 0 disable the soft constraint."], "extent": [3257, 3493]}, {"type": "para", "indent": 8, "text": ["For many use cases, a value of 0 (no constraint) may be required. Whether or not to use higher values should depend on numerical stability and whether optimization can converge or not."], "extent": [3493, 3687]}], "container": true, "attrs": {"id": "transAffine"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["P-Norm"], "extent": [3687, 3699], "body": [{"type": "para", "indent": 8, "text": ["Specifies the the power used to compute the centroid of the patch. Higher values will move the centroid of the bones closer to the vertices with max weights (soft-max)."], "extent": [3729, 3907]}], "container": true, "attrs": {"id": "transAffineNorm"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Weights "], "extent": [3907, 3923], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Weights Interations"], "extent": [3923, 3949], "body": [{"type": "para", "indent": 8, "text": ["Specifies how many weight updates to perform after each bone update. 1-5 iterations usually produce good results. These iterations are very expensive. As such, it is better to increase the ", {"scheme": null, "value": "#nlters", "type": "link", "text": ["Global Iteration"], "fullpath": "/nodes/sop/kinefx--dembones_skinningconverter.html#nlters", "fragment": "#nlters"}, " than to increase the number of ", {"type": "ui", "text": ["Weights Interations"]}, "."], "extent": [3977, 4258]}], "container": true, "attrs": {"id": "nWeightslters"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Smoothness"], "extent": [4258, 4274], "body": [{"type": "para", "indent": 8, "text": ["Controls the weights smoothness for the generated soft constraint. "], "extent": [4302, 4379]}], "container": true, "attrs": {"id": "weightsSmooth"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Step Size"], "extent": [4379, 4394], "body": [{"type": "para", "indent": 8, "text": ["Specifies the step size of the Implicit Laplacian smoothing on the weights for the soft constraint."], "extent": [4426, 4535]}], "container": true, "attrs": {"id": "weightsSmoothStep"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Min Non-Zero Weights"], "extent": [4535, 4561], "body": [{"type": "para", "indent": 8, "text": ["Specifies the number of non-zero weights per vertex required for the conversion to succeed."], "extent": [4579, 4680]}], "container": true, "attrs": {"id": "nnz"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}], "text": "Parameters"}, {"level": 1, "id": "inputs", "container": true, "type": "inputs_section", "indent": 0, "role": "section", "extent": [4680, 4688], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Rest Geometry"], "extent": [4688, 4704], "body": [{"type": "para", "indent": 4, "text": ["The geometry to capture. It must be closed."], "extent": [4704, 4753]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Capture Pose"], "extent": [4753, 4767], "body": [{"type": "para", "indent": 4, "text": ["The SOP skeleton to capture the ", {"type": "ui", "text": ["Skin Geometry"]}, " to."], "extent": [4767, 4826]}], "container": true}], "container": true}], "text": "Inputs"}, {"level": 1, "id": "outputs", "container": true, "type": "outputs_section", "indent": 0, "role": "section", "extent": [4826, 4835], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Rest Geometry"], "extent": [4835, 4851], "body": [{"type": "para", "indent": 4, "text": ["The skin geometry with capture attributes created as the ", {"type": "code", "text": ["boneCapture"]}, " point\n    attribute."], "extent": [4851, 4948]}], "container": true}], "container": true}], "text": "Outputs"}, {"level": 1, "id": "attributes", "container": true, "type": "attributes_section", "indent": 0, "role": "section", "extent": [4948, 4960], "body": [{"type": "attributes_item_group", "body": [{"type": "attributes_item", "indent": 0, "text": ["boneCapture"], "extent": [4960, 4974], "body": [{"type": "para", "indent": 4, "text": ["Attribute added in the ", {"type": "ui", "text": ["Skin Geometry"]}, " output that defines the skinning\n    weights for the deformation ready for use with ", {"scheme": "Node", "value": "/nodes/sop/kinefx--jointdeform", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--jointdeform.html"}, "."], "extent": [4974, 5136]}], "container": true, "role": "item", "id": "bonecapture"}], "container": true, "role": "item_group"}], "text": "Attributes"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [5136, 5145], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--jointdeform", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--jointdeform.html"}], "extent": [5145, 5178]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/agent", "type": "link", "text": "", "fullpath": "/nodes/sop/agent.html"}], "extent": [5178, 5197]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "/crowds/agents", "type": "link", "text": ["Agent Primitives"], "fullpath": "/crowds/agents.html"}], "extent": [5197, 5233]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "/character/kinefx/importcharacters", "type": "link", "text": ["Bringing animation and character data into KineFX"], "fullpath": "/character/kinefx/importcharacters.html"}], "extent": [5233, 5322]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "/character/kinefx/exportcharacters", "type": "link", "text": ["Getting animation and character data out of KineFX"], "fullpath": "/character/kinefx/exportcharacters.html"}], "extent": [5322, 5412]}], "container": true}], "text": "Related"}], "title": ["Dem Bones Skinning Converter"], "summary": ["Generates and assigns capture weights to points based on the Smooth Skinning Decomposition with Rigid Bones algorithm."]}