{"type": "root", "attrs": {"type": "node", "context": "vop", "internal": "turbnoise", "icon": "VOP/turbnoise", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Turbulent Noise"], "extent": [69, 89]}, {"type": "summary", "indent": 0, "text": ["Can compute three types of 1D and 3D noise with the ability to compute turbulence with roughness and attenuation."], "extent": [89, 211]}, {"type": "para", "indent": 0, "text": ["This operator can compute three types of 1D and 3D noise with the\nability to compute turbulence with roughness and attenuation:"], "extent": [211, 340]}, {"lang": null, "type": "pre", "indent": 0, "text": ["\nPerlin noise              (string value \"pnoise\")\nOriginal Perlin noise     (string value \"onoise\")\nSparse Convolution noise  (string value \"snoise\")\nAlligator noise           (string value \"anoise\")\nSimplex noise             (string value \"xnoise\")\nZero Centered Perlin      (string value \"correctnoise\")\n"], "extent": [340, 654]}, {"type": "para", "indent": 0, "text": ["Original Perlin noise is similar to Perlin noise, but marginally less\nefficient in computation and with different characteristics. The bounds\non the noise are roughly (-1, 1) when turbulence is 0."], "extent": [654, 853]}, {"type": "para", "indent": 0, "text": ["Perlin noise sums octaves of a noise with range about (0, 1), resulting in a\nnon-zero centered result. Thus the zero centered perlin better matches the\nranges of the other noise fields."], "extent": [853, 1040]}, {"type": "para", "indent": 0, "text": ["Sparse Convolution noise is similar to Worley noise. The noise returned\nis based on the weights of all of the closest points, with each point\u2019s\ncontribution based on a meta-ball like rolloff curve. That is, if the\nsample point is close to the sphere, its contribution will be greater.\nThe bounds on the noise are roughly (-1.7, 1.7) when turbulence is 0."], "extent": [1040, 1396]}, {"type": "para", "indent": 0, "text": ["Alligator noise is similar to Worley noise. It is currently not possible\nto simulate Alligator noise using the Worley functions, but it is\npossible to get a very similar 'look'. The bounds on the noise are\nroughly (0, 0.5) when turbulence is 0."], "extent": [1396, 1642]}, {"type": "para", "indent": 0, "text": ["Simplex noise is very close to Perlin noise, except with the samples on a\nsimplex mesh rather than a grid.  This results in less grid artifacts.  It also\nuses a higher order ", {"type": "code", "text": ["bspline"]}, " to provide better derivatives."], "extent": [1642, 1858]}, {"type": "para", "indent": 0, "text": ["The relative costs for computing noise of different types is roughly:"], "extent": [1858, 1929]}, {"lang": null, "type": "pre", "indent": 0, "text": ["\nCost | Noise Type\n-----+-------------------------\n 1.0 | Perlin Noise             (see Periodic Noise operator)\n 1.1 | Original Perlin Noise\n 1.8 | Worley Noise             (see Worley Noise operator)\n 1.8 | Periodic Worley Noise    (see Periodic Worley Noise operator)\n 2.1 | Sparse Convolution Noise\n 2.3 | Alligator Noise\n"], "extent": [1929, 2262]}, {"level": 1, "id": "inputs", "container": true, "type": "inputs_section", "indent": 0, "role": "section", "extent": [2262, 2271], "body": [{"type": "para", "indent": 0, "text": ["Make sure at least the Position (", {"type": "code", "text": ["pos"]}, ") input is connected in order to\nnotice any noise. The easiest way to accomplish this is to pipe the\nglobal variable ", {"type": "code", "text": ["P"]}, " into the ", {"type": "code", "text": ["pos"]}, " input. All global variables are\naccessible from the ", {"scheme": "Node", "value": "/nodes/vop/global", "type": "link", "text": ["Global Variables"], "fullpath": "/nodes/vop/global.html"}, " operator."], "extent": [2271, 2544]}], "text": "Inputs"}, {"level": 1, "id": "outputs", "container": true, "type": "outputs_section", "indent": 0, "role": "section", "extent": [2544, 2553], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["noise"]}], "extent": [2553, 2563], "body": [{"type": "para", "indent": 4, "text": ["The output of the noise function. The data type of this output is controlled by the ", {"type": "ui", "text": ["Signature"]}, " parameter."], "extent": [2563, 2677]}], "container": true}], "container": true}], "text": "Outputs"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [2677, 2689], "body": [{"type": "include_group", "body": [{"ext": "unifiednoise#signature", "type": "include", "indent": 0, "role": "item", "extent": [2689, 2724]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Noise type"], "extent": [3092, 3104], "body": [{"type": "para", "indent": 4, "text": ["The type of noise to generate. Different algorithms give noise with different characteristics."], "extent": [3119, 3223]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Fast"], "extent": [3223, 3233], "body": [{"type": "para", "indent": 8, "text": ["The default. A faster and more interesting variant of Perlin noise."], "extent": [3233, 3314]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/vop/unoise_simplex.jpg", "type": "img", "text": ""}], "extent": [3314, 3368]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Sparse Convolution"], "extent": [3368, 3392], "body": [{"type": "para", "indent": 8, "text": ["Sparse Convolution noise is similar to Worley noise. Does not have artifacts at grid points."], "extent": [3392, 3498]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/vop/unoise_sparse.jpg", "type": "img", "text": ""}], "extent": [3498, 3551]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Alligator"], "extent": [3551, 3566], "body": [{"type": "para", "indent": 8, "text": ["Produces a bumpy output. Named for its alleged resemblance to alligator skin."], "extent": [3566, 3657]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/vop/unoise_alligator.jpg", "type": "img", "text": ""}], "extent": [3657, 3717]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Perlin"], "extent": [3717, 3729], "body": [{"type": "para", "indent": 8, "text": ["A noise where the visual details are the same size. ", {"scheme": "Wp", "value": "http://en.wikipedia.org/wiki/Perlin_noise", "type": "link", "text": ["Wikipedia article"], "exists": true}], "extent": [3729, 3830]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/vop/unoise_perlin.jpg", "type": "img", "text": ""}, "\n        ", {"scheme": "Image", "value": "/images/nodes/vop/unoise_periodic_perlin.jpg", "type": "img", "text": ""}], "extent": [3830, 3944]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Perlin Flow"], "extent": [3944, 3961], "body": [{"type": "para", "indent": 8, "text": ["A noise that\u2019s stable over time, like a rotated Perlin noise, useful to create noise that seems to swirl and flow smoothly across time. Use the ", {"type": "ui", "text": ["Flow rotation"]}, " parameter below to control the rotation."], "extent": [3961, 4177]}, {"type": "video_group", "body": [{"ext": null, "type": "video", "indent": 8, "role": "item", "extent": [4177, 4201], "body": [], "container": true, "attrs": {"src": "/videos/vop/unoise_flow.mp4"}}, {"ext": null, "type": "video", "indent": 8, "role": "item", "extent": [4248, 4264], "body": [], "container": true, "attrs": {"src": "/videos/vop/unoise_periodic_flow.mp4"}}], "container": true, "role": "item_group"}], "container": true}, {"type": "dt", "indent": 4, "text": ["Simplex"], "extent": [4324, 4337], "body": [{"type": "para", "indent": 8, "text": ["A noise similar to Perlin but the noise lattice is on a tetrahedral mesh rather than a grid.  This can avoid the grid patterns often visible in Perlin noise."], "extent": [4337, 4504]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Worley Cellular F1"], "extent": [4504, 4528], "body": [{"type": "para", "indent": 8, "text": ["Produces cellular features similar to plant cells, ocean waves, honeycombs, cratered landscapes, and so on. ", {"scheme": "Wp", "value": "http://en.wikipedia.org/wiki/Worley_noise", "type": "link", "text": ["Wikipedia article"], "exists": true}], "extent": [4528, 4685]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/vop/unoise_worley_f1.jpg", "type": "img", "text": ""}], "extent": [4685, 4745]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Worley Cellular F2-F1"], "extent": [4745, 4772], "body": [{"type": "para", "indent": 8, "text": ["A variant of Worley noise that produces blunted and cornered features."], "extent": [4772, 4856]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/vop/unoise_worley_f2.jpg", "type": "img", "text": ""}], "extent": [4856, 4916]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Manhattan Cellular F1"], "extent": [4916, 4943], "body": [{"type": "para", "indent": 8, "text": ["A variant of Worley F1 noise that uses Manhattan distance calculation. Useful when you want unusual-looking noise."], "extent": [4943, 5071]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Manhattan Cellular F2-F1"], "extent": [5071, 5101], "body": [{"type": "para", "indent": 8, "text": ["A variant of Worley F2-F1 noise that uses Manhattan distance calculation. Useful when you want unusual-looking noise."], "extent": [5101, 5232]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Chebyshev Cellular F1"], "extent": [5232, 5259], "body": [{"type": "para", "indent": 8, "text": ["A variant of Worley F1 noise that uses Chebyshev distance calculation. Useful when you want unusual-looking noise."], "extent": [5259, 5387]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Chebyshev Cellular F2-F1"], "extent": [5387, 5417], "body": [{"type": "para", "indent": 8, "text": ["A variant of Worley F2-F1 noise that uses Chebyshev distance calculation. Useful when you want unusual-looking noise."], "extent": [5417, 5544]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "basis"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Frequency"], "extent": [5544, 5555], "body": [{"type": "para", "indent": 4, "text": ["The frequency of the noise. Higher values give smaller scaled details in the noise."], "extent": [5574, 5667]}, {"type": "video_group", "body": [{"ext": null, "type": "video", "indent": 4, "role": "item", "extent": [5667, 5683], "body": [], "container": true, "attrs": {"src": "/videos/vop/unoise_frequency.mp4"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "freq"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Offset"], "extent": [5731, 5739], "body": [{"type": "para", "indent": 4, "text": ["The offset of the input into the noise function. If you visualize the noise as a 2D graph or 3D height field, this has the effect of ", {"type": "q", "text": ["panning"]}, " across the space of possible noise outputs. If you have the general noise effect you want but just want to get a different set of values for a different look, try changing the offset."], "extent": [5760, 6096]}, {"type": "video_group", "body": [{"ext": null, "type": "video", "indent": 4, "role": "item", "extent": [6096, 6112], "body": [], "container": true, "attrs": {"src": "/videos/vop/unoise_offset.mp4"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "offset"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Amplitude"], "extent": [2814, 2825], "body": [{"type": "para", "indent": 4, "text": ["Controls the noise\u2019s minimum and maximum values. When you think of noise as a curve, the parameter controls the height of the peaks and valleys."], "extent": [2825, 2975]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Roughness"], "extent": [8086, 8097], "body": [{"type": "para", "indent": 4, "text": ["The scale increment between iterations of fractal noise added to the basic output. The higher the value the larger the ", {"type": "q", "text": ["jaggies"]}, " added to the output. You can use a negative value for roughness."], "extent": [8117, 8320]}, {"type": "video_group", "body": [{"ext": null, "type": "video", "indent": 4, "role": "item", "extent": [8320, 8336], "body": [], "container": true, "attrs": {"src": "/videos/vop/unoise_roughness.mp4"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "rough"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attenuation"], "extent": [3005, 3018], "body": [{"type": "para", "indent": 4, "text": ["Flattens the noise to prevent extreme spikes by damping the values. Higher values create a smoother look."], "extent": [3018, 3129]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Turbulence"], "extent": [3129, 3141], "body": [{"type": "para", "indent": 4, "text": ["Controls the degree of noise. Higher values create a more chaotic and less smooth look, with more peaks and valleys."], "extent": [3141, 3263]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [3263, 3272], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/vop/periodicnoise", "type": "link", "text": "", "fullpath": "/nodes/vop/periodicnoise.html"}], "extent": [3272, 3303]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/vop/aanoise", "type": "link", "text": "", "fullpath": "/nodes/vop/aanoise.html"}], "extent": [3303, 3328]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/vop/worleynoise", "type": "link", "text": "", "fullpath": "/nodes/vop/worleynoise.html"}], "extent": [3328, 3357]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/vop/pworleynoise", "type": "link", "text": "", "fullpath": "/nodes/vop/pworleynoise.html"}], "extent": [3357, 3388]}], "container": true}], "text": "Related"}], "title": ["Turbulent Noise"], "summary": ["Can compute three types of 1D and 3D noise with the ability to compute turbulence with roughness and attenuation."], "included": ["/nodes/vop/unifiednoise"]}