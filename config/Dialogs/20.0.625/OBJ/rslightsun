// Magic: 27d4afab
// Automatically generated PSI dialog (PSI version 20.0.625)
// Wed Oct  2 23:54:06 2024


f_tmp = FLOAT_FIELD;	// dialog.top.ui
keeppos.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1) NO_MARGIN_SPACING_SCALE

keeppos.gad = ROW
{
    
    {  }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("keeppos", "Keep Position When Parenting") toggle VALUE(keeppos.val);

    {  }

    {  }
}

pre_xform.gad = ROW
{
    {  }

    pre_xform.menu;
}
}	// Template join.bot

xOrd.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1) NO_MARGIN_SPACING_SCALE

xOrd.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    {  }

    xOrd.label = PARM_LABEL_SIMPLE("Transform Order", "xOrd") WIDTH(1.5);
    { WIDTH(0.09) }

    xOrd.menu;

    {  }

    {  }
}

rOrd.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    {  }

    rOrd.menu;

    {  }

    {  }
}
}	// Template join.bot


t.gad = ROW
{
   HSTRETCH
   { WIDTH(0.18) }

   t.label = PARM_LABEL("Translate", "t") WIDTH(1.5);
   PARM(float, 3, "t", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(t.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_transform" VALUE(t.script_action)
	HELP("Select an object to match the translation with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    { WIDTH(0.1) }
}

r.gad = ROW
{
   HSTRETCH
   { WIDTH(0.18) }

   r.label = PARM_LABEL("Rotate", "r") WIDTH(1.5);
   PARM(float, 3, "r", none, none, "X,Y,Z")
	RANGE(0,360)  LABELREF(r.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_rotation" VALUE(r.script_action)
	HELP("Select an object to match the rotation with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    { WIDTH(0.1) }
}
tdisplay.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1) NO_MARGIN_SPACING_SCALE
tdisplay.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0) NO_MARGIN_SPACING_SCALE

tdisplay.gad = PARM_BUTTON("tdisplay", "") toggle VALUE(tdisplay.val) RETAIN_SIZE_WHEN_HIDDEN;

display.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 {  }

 display.label = PARM_LABEL("Display", "display") WIDTH(1.32);
 PARM(integer, 1, "display", none, none) RANGE(0,1)
	LOCK_RANGE LABELREF(display.label) HSTRETCH;

  {  }
}
}	
}	// Template join.bot


l_iconscale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 l_iconscale.label = PARM_LABEL("Icon Scale", "l_iconscale") WIDTH(1.5);
 PARM(float, 1, "l_iconscale", none, none) RANGE(0,10)
	 LABELREF(l_iconscale.label) HSTRETCH;

  { WIDTH(0.1) }
}

caching.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("caching", "Cache Object Transform") toggle VALUE(caching.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

picking.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("picking", "Viewport Selecting Enabled") toggle VALUE(picking.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

pickscript.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
 { WIDTH(0.18) }

 pickscript.label = PARM_LABEL("Select Script", "pickscript") WIDTH(1.5);

 PARM_FIELD (pathstring, "pickscript") LABELREF(pickscript.label)
	VALUE(pickscript.val) HSTRETCH;

    pickscript.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(pickscript.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 { WIDTH(0.1) }
}

lookatpath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)
 { WIDTH(0.18) }

 lookatpath.label = PARM_LABEL("Look At", "lookatpath") WIDTH(1.5);
 PARM_FIELD(pathstring, "lookatpath") VALUE(lookatpath.val) 
	LABELREF(lookatpath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(lookatpath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(lookatpath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

 { WIDTH(0.1) }
}

lookup.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    lookup.label = PARM_LABEL_SIMPLE("Look At Up Vector", "lookup") WIDTH(1.5);
    { WIDTH(0.09) }

    lookup.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

pathobjpath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)
 { WIDTH(0.18) }

 pathobjpath.label = PARM_LABEL("Path Object", "pathobjpath") WIDTH(1.5);
 PARM_FIELD(pathstring, "pathobjpath") VALUE(pathobjpath.val) 
	LABELREF(pathobjpath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(pathobjpath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(pathobjpath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

 { WIDTH(0.1) }
}

roll.gad = ROW
{
   HSTRETCH
   { WIDTH(0.18) }

   roll.label = PARM_LABEL( "Roll", "roll" ) WIDTH(1.5);
   PARM(float, 1, "roll", none, none) RANGE(-360, 360)
	LABELREF( roll.label ) HSTRETCH;

   { WIDTH(0.1) }
}

pos.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 pos.label = PARM_LABEL("Position", "pos") WIDTH(1.5);
 PARM(float, 1, "pos", none, none) RANGE(0,10)
	LOCK_RANGE_MIN LABELREF(pos.label) HSTRETCH;

  { WIDTH(0.1) }
}

uparmtype.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    uparmtype.label = PARM_LABEL_SIMPLE("Parameterization", "uparmtype") WIDTH(1.5);
    { WIDTH(0.09) }

    uparmtype.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

pathorient.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 pathorient.label = PARM_LABEL("Orient Along Path", "pathorient") WIDTH(1.5);
 PARM(integer, 1, "pathorient", none, none) RANGE(0,1)
	 LABELREF(pathorient.label) HSTRETCH;

  { WIDTH(0.1) }
}

up.gad = ROW 
{
    HSTRETCH
   { WIDTH(0.18) }

    up.label = PARM_LABEL("Orient Up Vector", "up") WIDTH(1.5);
    PARM(float, 3, "up", none, none) LABELREF(up.label)
	HSTRETCH;

   { WIDTH(0.1) }
}

bank.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 bank.label = PARM_LABEL("Auto-Bank factor", "bank") WIDTH(1.5);
 PARM(float, 1, "bank", none, none) RANGE(-1,1)
	 LABELREF(bank.label) HSTRETCH;

  { WIDTH(0.1) }
}

light_enabled.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("light_enabled", "On") toggle VALUE(light_enabled.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}
PhysicalSun1_on.gad = NULL { }
PhysicalSky1_on.gad = NULL { }

ogl_enablelight.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ogl_enablelight", "Enabled In Viewports") toggle VALUE(ogl_enablelight.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

PhysicalSky1_model.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    PhysicalSky1_model.label = PARM_LABEL_SIMPLE("Model", "PhysicalSky1_model") WIDTH(1.5);
    { WIDTH(0.09) }

    PhysicalSky1_model.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}
PhysicalSun1_model.gad = NULL { }

PhysicalSun1_multiplier.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 PhysicalSun1_multiplier.label = PARM_LABEL("Intensity", "PhysicalSun1_multiplier") WIDTH(1.5);
 PARM(float, 1, "PhysicalSun1_multiplier", none, none) RANGE(0,2)
	 LABELREF(PhysicalSun1_multiplier.label) HSTRETCH;

  { WIDTH(0.1) }
}

PhysicalSun1_useNonPhysicalIntensity.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("PhysicalSun1_useNonPhysicalIntensity", "Non-Physical Intensity") toggle VALUE(PhysicalSun1_useNonPhysicalIntensity.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

PhysicalSun1_redblueshift.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 PhysicalSun1_redblueshift.label = PARM_LABEL("Red-Blue Shift", "PhysicalSun1_redblueshift") WIDTH(1.5);
 PARM(float, 1, "PhysicalSun1_redblueshift", none, none) RANGE(-10,10)
	 LABELREF(PhysicalSun1_redblueshift.label) HSTRETCH;

  { WIDTH(0.1) }
}

PhysicalSun1_saturation.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 PhysicalSun1_saturation.label = PARM_LABEL("Saturation", "PhysicalSun1_saturation") WIDTH(1.5);
 PARM(float, 1, "PhysicalSun1_saturation", none, none) RANGE(0,1)
	 LABELREF(PhysicalSun1_saturation.label) HSTRETCH;

  { WIDTH(0.1) }
}

PhysicalSun1_saturation_affects_color_adjustments.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("PhysicalSun1_saturation_affects_color_adjustments", "Saturation Affects Color Adjustments") toggle VALUE(PhysicalSun1_saturation_affects_color_adjustments.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}
PhysicalSun1_sun_disk_scale.gad = NULL { }

PhysicalSun1_haze.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 PhysicalSun1_haze.label = PARM_LABEL("Turbidity", "PhysicalSun1_haze") WIDTH(1.5);
 PARM(float, 1, "PhysicalSun1_haze", none, none) RANGE(2,10)
	 LABELREF(PhysicalSun1_haze.label) HSTRETCH;

  { WIDTH(0.1) }
}

PhysicalSun1_ozone.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 PhysicalSun1_ozone.label = PARM_LABEL("Ozone", "PhysicalSun1_ozone") WIDTH(1.5);
 PARM(float, 1, "PhysicalSun1_ozone", none, none) RANGE(0,1)
	 LABELREF(PhysicalSun1_ozone.label) HSTRETCH;

  { WIDTH(0.1) }
}

PhysicalSun1_horizon_height.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 PhysicalSun1_horizon_height.label = PARM_LABEL("Horizon Height", "PhysicalSun1_horizon_height") WIDTH(1.5);
 PARM(float, 1, "PhysicalSun1_horizon_height", none, none) RANGE(-10,10)
	 LABELREF(PhysicalSun1_horizon_height.label) HSTRETCH;

  { WIDTH(0.1) }
}

PhysicalSky1_horizon_blur.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 PhysicalSky1_horizon_blur.label = PARM_LABEL("Horizon Blur", "PhysicalSky1_horizon_blur") WIDTH(1.5);
 PARM(float, 1, "PhysicalSky1_horizon_blur", none, none) RANGE(0,5)
	 LABELREF(PhysicalSky1_horizon_blur.label) HSTRETCH;

  { WIDTH(0.1) }
}

PhysicalSky1_ground_color.gad = 
{
    LAYOUT (horizontal) HSTRETCH
    { WIDTH(0.18) }

    PhysicalSky1_ground_color.label = PARM_LABEL("Ground Color", "PhysicalSky1_ground_color") WIDTH(1.5);
    PARM(float, 3, "PhysicalSky1_ground_color", none, COLOR, "R,G,B") 
	LABELREF(PhysicalSky1_ground_color.label) HSTRETCH;

    { WIDTH(0.1) }
}

PhysicalSky1_night_color.gad = 
{
    LAYOUT (horizontal) HSTRETCH
    { WIDTH(0.18) }

    PhysicalSky1_night_color.label = PARM_LABEL("Night Color", "PhysicalSky1_night_color") WIDTH(1.5);
    PARM(float, 3, "PhysicalSky1_night_color", none, COLOR, "R,G,B") 
	LABELREF(PhysicalSky1_night_color.label) HSTRETCH;

    { WIDTH(0.1) }
}

PhysicalSky1_sun_disk_intensity.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 PhysicalSky1_sun_disk_intensity.label = PARM_LABEL("Sun Disk Intensity", "PhysicalSky1_sun_disk_intensity") WIDTH(1.5);
 PARM(float, 1, "PhysicalSky1_sun_disk_intensity", none, none) RANGE(0,10)
	 LABELREF(PhysicalSky1_sun_disk_intensity.label) HSTRETCH;

  { WIDTH(0.1) }
}

PhysicalSky1_sun_glow_intensity.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 PhysicalSky1_sun_glow_intensity.label = PARM_LABEL("Sun Glow Intensity", "PhysicalSky1_sun_glow_intensity") WIDTH(1.5);
 PARM(float, 1, "PhysicalSky1_sun_glow_intensity", none, none) RANGE(0,100)
	 LABELREF(PhysicalSky1_sun_glow_intensity.label) HSTRETCH;

  { WIDTH(0.1) }
}

PhysicalSky1_sun_disk_scale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 PhysicalSky1_sun_disk_scale.label = PARM_LABEL("Sun Disk Scale", "PhysicalSky1_sun_disk_scale") WIDTH(1.5);
 PARM(float, 1, "PhysicalSky1_sun_disk_scale", none, none) RANGE(0,100)
	 LABELREF(PhysicalSky1_sun_disk_scale.label) HSTRETCH;

  { WIDTH(0.1) }
}

PhysicalSky1_sun_tint.gad = 
{
    LAYOUT (horizontal) HSTRETCH
    { WIDTH(0.18) }

    PhysicalSky1_sun_tint.label = PARM_LABEL("Sun Tint", "PhysicalSky1_sun_tint") WIDTH(1.5);
    PARM(float, 3, "PhysicalSky1_sun_tint", none, COLOR, "R,G,B") 
	LABELREF(PhysicalSky1_sun_tint.label) HSTRETCH;

    { WIDTH(0.1) }
}

PhysicalSky1_forceAlphaToZero.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("PhysicalSky1_forceAlphaToZero", "Force Alpha To Zero") toggle VALUE(PhysicalSky1_forceAlphaToZero.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

PhysicalSky1_background_enable.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("PhysicalSky1_background_enable", "Background") toggle VALUE(PhysicalSky1_background_enable.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

PhysicalSky1_reflection_enable.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("PhysicalSky1_reflection_enable", "Reflection") toggle VALUE(PhysicalSky1_reflection_enable.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

PhysicalSky1_reflection_intensity.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 PhysicalSky1_reflection_intensity.label = PARM_LABEL("Reflection Intensity", "PhysicalSky1_reflection_intensity") WIDTH(1.5);
 PARM(float, 1, "PhysicalSky1_reflection_intensity", none, none) RANGE(0,1)
	 LABELREF(PhysicalSky1_reflection_intensity.label) HSTRETCH;

  { WIDTH(0.1) }
}

PhysicalSky1_refraction_enable.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("PhysicalSky1_refraction_enable", "Refraction") toggle VALUE(PhysicalSky1_refraction_enable.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

PhysicalSky1_refraction_intensity.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 PhysicalSky1_refraction_intensity.label = PARM_LABEL("Refraction Intensity", "PhysicalSky1_refraction_intensity") WIDTH(1.5);
 PARM(float, 1, "PhysicalSky1_refraction_intensity", none, none) RANGE(0,1)
	 LABELREF(PhysicalSky1_refraction_intensity.label) HSTRETCH;

  { WIDTH(0.1) }
}

PhysicalSky1_gi_enable.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("PhysicalSky1_gi_enable", "GI") toggle VALUE(PhysicalSky1_gi_enable.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

PhysicalSky1_gi_intensity.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 PhysicalSky1_gi_intensity.label = PARM_LABEL("GI Intensity", "PhysicalSky1_gi_intensity") WIDTH(1.5);
 PARM(float, 1, "PhysicalSky1_gi_intensity", none, none) RANGE(0,1)
	 LABELREF(PhysicalSky1_gi_intensity.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_lightGroup.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    RSL_lightGroup.label = PARM_LABEL("AOV Light Group", "RSL_lightGroup") WIDTH(1.5);
    PARM_FIELD(string, "RSL_lightGroup") VALUE(RSL_lightGroup.val) 
	LABELREF(RSL_lightGroup.label) HSTRETCH;

    { WIDTH(0.1) }
}

PhysicalSun1_shadowTransparency.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 PhysicalSun1_shadowTransparency.label = PARM_LABEL("Transparency", "PhysicalSun1_shadowTransparency") WIDTH(1.5);
 PARM(float, 1, "PhysicalSun1_shadowTransparency", none, none) RANGE(0,1)
	 LABELREF(PhysicalSun1_shadowTransparency.label) HSTRETCH;

  { WIDTH(0.1) }
}

PhysicalSun1_SAMPLINGOVERRIDES_shadowSamplesScale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 PhysicalSun1_SAMPLINGOVERRIDES_shadowSamplesScale.label = PARM_LABEL("Softness", "PhysicalSun1_SAMPLINGOVERRIDES_shadowSamplesScale") WIDTH(1.5);
 PARM(float, 1, "PhysicalSun1_SAMPLINGOVERRIDES_shadowSamplesScale", none, none) RANGE(0,2)
	 LABELREF(PhysicalSun1_SAMPLINGOVERRIDES_shadowSamplesScale.label) HSTRETCH;

  { WIDTH(0.1) }
}

PhysicalSun1_SAMPLINGOVERRIDES_numShadowSamples.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 PhysicalSun1_SAMPLINGOVERRIDES_numShadowSamples.label = PARM_LABEL("Samples", "PhysicalSun1_SAMPLINGOVERRIDES_numShadowSamples") WIDTH(1.5);
 PARM(integer, 1, "PhysicalSun1_SAMPLINGOVERRIDES_numShadowSamples", none, none) RANGE(1,256)
	 LABELREF(PhysicalSun1_SAMPLINGOVERRIDES_numShadowSamples.label) HSTRETCH;

  { WIDTH(0.1) }
}
RSL_affectDiffuse.gad = NULL { }
RSL_affectSpecular.gad = NULL { }
RSL_matteShadow.gad = NULL { }

RSL_indirectMaxTraceDepth.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_indirectMaxTraceDepth.label = PARM_LABEL("GI Max Trace Depth", "RSL_indirectMaxTraceDepth") WIDTH(1.5);
 PARM(integer, 1, "RSL_indirectMaxTraceDepth", none, none) RANGE(0,255)
	LOCK_RANGE LABELREF(RSL_indirectMaxTraceDepth.label) HSTRETCH;

  { WIDTH(0.1) }
}

sepparm2.gad = 

{
    LAYOUT(vertical) HSTRETCH HMARGIN(0.18, 0.1)
    NO_MARGIN_SPACING_SCALE

    { HEIGHT(0.1) }
    SEPARATOR;
    { HEIGHT(0.1) }
}

RSL_volumeSamples.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_volumeSamples.label = PARM_LABEL("Volume Samples", "RSL_volumeSamples") WIDTH(1.5);
 PARM(integer, 1, "RSL_volumeSamples", none, none) RANGE(1,512)
	 LABELREF(RSL_volumeSamples.label) HSTRETCH;

  { WIDTH(0.1) }
}

sepparm.gad = 

{
    LAYOUT(vertical) HSTRETCH HMARGIN(0.18, 0.1)
    NO_MARGIN_SPACING_SCALE

    { HEIGHT(0.1) }
    SEPARATOR;
    { HEIGHT(0.1) }
}

RSL_diffuseScale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_diffuseScale.label = PARM_LABEL("Diffuse", "RSL_diffuseScale") WIDTH(1.5);
 PARM(float, 1, "RSL_diffuseScale", none, none) RANGE(0,1)
	 LABELREF(RSL_diffuseScale.label) HSTRETCH;

  { WIDTH(0.1) }
}
RSL_specularScale.gad = NULL { }

RSL_reflectionScale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_reflectionScale.label = PARM_LABEL("Reflection", "RSL_reflectionScale") WIDTH(1.5);
 PARM(float, 1, "RSL_reflectionScale", none, none) RANGE(0,1)
	 LABELREF(RSL_reflectionScale.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_transmissionScale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_transmissionScale.label = PARM_LABEL("Transmission", "RSL_transmissionScale") WIDTH(1.5);
 PARM(float, 1, "RSL_transmissionScale", none, none) RANGE(0,1)
	 LABELREF(RSL_transmissionScale.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_sssScale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_sssScale.label = PARM_LABEL("Single Scattering", "RSL_sssScale") WIDTH(1.5);
 PARM(float, 1, "RSL_sssScale", none, none) RANGE(0,1)
	 LABELREF(RSL_sssScale.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_multisssScale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_multisssScale.label = PARM_LABEL("Multiple Scattering", "RSL_multisssScale") WIDTH(1.5);
 PARM(float, 1, "RSL_multisssScale", none, none) RANGE(0,1)
	 LABELREF(RSL_multisssScale.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_indirectScale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_indirectScale.label = PARM_LABEL("Global Illumination", "RSL_indirectScale") WIDTH(1.5);
 PARM(float, 1, "RSL_indirectScale", none, none) RANGE(0,1)
	 LABELREF(RSL_indirectScale.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_volumeScale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_volumeScale.label = PARM_LABEL("Volume", "RSL_volumeScale") WIDTH(1.5);
 PARM(float, 1, "RSL_volumeScale", none, none) RANGE(0,1)
	 LABELREF(RSL_volumeScale.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_emitCausticPhotons.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_emitCausticPhotons", "Caustic Photons") toggle VALUE(RSL_emitCausticPhotons.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

RSL_causticIntensity.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_causticIntensity.label = PARM_LABEL("Intensity", "RSL_causticIntensity") WIDTH(1.5);
 PARM(float, 1, "RSL_causticIntensity", none, none) RANGE(0,2)
	 LABELREF(RSL_causticIntensity.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_causticPhotons.gad = 
{
 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_causticPhotons.label = PARM_LABEL("Photons", "RSL_causticPhotons") WIDTH(1.5);
 PARM(integer, 1, "RSL_causticPhotons", none, LOGSCALE) RANGE(10000,1000000)
	 LABELREF(RSL_causticPhotons.label) HSTRETCH;

  { WIDTH(0.1) }
}

SetEnableLegacySoftShadowTechnique.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("SetEnableLegacySoftShadowTechnique", "Soft Shadow Technique") toggle VALUE(SetEnableLegacySoftShadowTechnique.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

RSL_emitGIPhotons.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_emitGIPhotons", "Emit GI Photons") toggle VALUE(RSL_emitGIPhotons.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

RSL_giIntensity.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_giIntensity.label = PARM_LABEL("Intensity Multiplier", "RSL_giIntensity") WIDTH(1.5);
 PARM(float, 1, "RSL_giIntensity", none, none) RANGE(0,2)
	 LABELREF(RSL_giIntensity.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_giPhotons.gad = 
{
 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_giPhotons.label = PARM_LABEL("Number of Photons", "RSL_giPhotons") WIDTH(1.5);
 PARM(integer, 1, "RSL_giPhotons", none, LOGSCALE) RANGE(10000,1000000)
	 LABELREF(RSL_giPhotons.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_setInclusive.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_setInclusive", "Enable Light-Mesh Associations") toggle VALUE(RSL_setInclusive.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

RSL_lightLinking.gad = 
{
 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_lightLinking.label = PARM_LABEL("Light Enabled For", "RSL_lightLinking") WIDTH(1.5);
 PARM_FIELD (pathstring, "RSL_lightLinking") LABELREF(RSL_lightLinking.label) 
	VALUE(RSL_lightLinking.val) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(RSL_lightLinking.plus) LOOKFLAT
    HELP("Open floating bundle chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 { WIDTH(0.1) }
}

RSL_shadowLinking.gad = 
{
 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_shadowLinking.label = PARM_LABEL("Shadows Enabled For", "RSL_shadowLinking") WIDTH(1.5);
 PARM_FIELD (pathstring, "RSL_shadowLinking") LABELREF(RSL_shadowLinking.label) 
	VALUE(RSL_shadowLinking.val) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(RSL_shadowLinking.plus) LOOKFLAT
    HELP("Open floating bundle chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 { WIDTH(0.1) }
}
light_enable.gad = NULL { }
light_type.gad = NULL { }
use_dcolor.gad = NULL { }
dcolor.gad = NULL { }
s.gad = NULL { }
p.gad = NULL { }
scale.gad = NULL { }
dimmer.gad = NULL { }
shadow_type.gad = NULL { }
projection.gad = NULL { }
childcomp.gad = NULL { }
lookupobjpath.gad = NULL { }
constraints_on.gad = NULL { }
constraints_path.gad = NULL { }
pr.gad = NULL { }

folder8.gad = 

GROUP simple "Global Illumination" flat 
{ 
    VALUE(folder8.gad.val) LAYOUT(vertical) HSTRETCH 
	    RSL_emitGIPhotons.gad;		
	    RSL_giIntensity.gad;		
	    RSL_giPhotons.gad;		
} 

folder6.gad = 
GROUP collapsible "Legacy" flat   
{
    VALUE(folder6.gad.val) LAYOUT(vertical) HSTRETCH
	    SetEnableLegacySoftShadowTechnique.gad;		
} 

folder7.gad = 
GROUP collapsible "Caustics" flat   
{
    VALUE(folder7.gad.val) LAYOUT(vertical) HSTRETCH
	    RSL_emitCausticPhotons.gad;		
	    RSL_causticIntensity.gad;		
	    RSL_causticPhotons.gad;		
} 

folder5.gad = 

GROUP simple "Volume" flat 
{ 
    VALUE(folder5.gad.val) LAYOUT(vertical) HSTRETCH 
} 

folder2.gad = 
GROUP collapsible "Contribution" flat   
{
    VALUE(folder2.gad.val) LAYOUT(vertical) HSTRETCH
	    RSL_affectDiffuse.gad;		
	    RSL_affectSpecular.gad;		
	    RSL_matteShadow.gad;		
	    RSL_indirectMaxTraceDepth.gad;		
	    sepparm2.gad;		
	    RSL_volumeSamples.gad;		
	    sepparm.gad;		
	    RSL_diffuseScale.gad;		
	    RSL_specularScale.gad;		
	    RSL_reflectionScale.gad;		
	    RSL_transmissionScale.gad;		
	    RSL_sssScale.gad;		
	    RSL_multisssScale.gad;		
	    RSL_indirectScale.gad;		
	    RSL_volumeScale.gad;		
} 

PhysicalSun1_Shadow_3.gad = 
GROUP collapsible "Shadow" flat   
{
    VALUE(PhysicalSun1_Shadow_3.gad.val) LAYOUT(vertical) HSTRETCH
	    PhysicalSun1_shadowTransparency.gad;		
	    PhysicalSun1_SAMPLINGOVERRIDES_shadowSamplesScale.gad;		
	    PhysicalSun1_SAMPLINGOVERRIDES_numShadowSamples.gad;		
} 

folder1.gad = 
GROUP collapsible "Light Group" flat   
{
    VALUE(folder1.gad.val) LAYOUT(vertical) HSTRETCH
	    RSL_lightGroup.gad;		
} 

PhysicalSky1_Ray_Type_Enable_5.gad = 

GROUP simple "Ray Type Enable" flat 
{ 
    VALUE(PhysicalSky1_Ray_Type_Enable_5.gad.val) LAYOUT(vertical) HSTRETCH 
	    PhysicalSky1_background_enable.gad;		
	    PhysicalSky1_reflection_enable.gad;		
	    PhysicalSky1_reflection_intensity.gad;		
	    PhysicalSky1_refraction_enable.gad;		
	    PhysicalSky1_refraction_intensity.gad;		
	    PhysicalSky1_gi_enable.gad;		
	    PhysicalSky1_gi_intensity.gad;		
} 

PhysicalSky1_Overrides_4.gad = 
GROUP collapsible "Overrides" flat   
{
    VALUE(PhysicalSky1_Overrides_4.gad.val) LAYOUT(vertical) HSTRETCH
	    PhysicalSky1_forceAlphaToZero.gad;		
	    PhysicalSky1_Ray_Type_Enable_5.gad;		
} 

folder9.gad = 

GROUP simple "Sun" flat 
{ 
    VALUE(folder9.gad.val) LAYOUT(vertical) HSTRETCH 
	    PhysicalSky1_sun_disk_intensity.gad;		
	    PhysicalSky1_sun_glow_intensity.gad;		
	    PhysicalSky1_sun_disk_scale.gad;		
	    PhysicalSky1_sun_tint.gad;		
} 

PhysicalSky1_Sun_3.gad = 

GROUP simple "Sun" flat 
{ 
    VALUE(PhysicalSky1_Sun_3.gad.val) LAYOUT(vertical) HSTRETCH 
} 

PhysicalSun1_Atmosphere_1.gad = 

GROUP simple "Atmosphere" flat 
{ 
    VALUE(PhysicalSun1_Atmosphere_1.gad.val) LAYOUT(vertical) HSTRETCH 
	    PhysicalSun1_sun_disk_scale.gad;		
	    PhysicalSun1_haze.gad;		
	    PhysicalSun1_ozone.gad;		
	    PhysicalSun1_horizon_height.gad;		
	    PhysicalSky1_horizon_blur.gad;		
	    PhysicalSky1_ground_color.gad;		
	    PhysicalSky1_night_color.gad;		
} 

PhysicalSun1_Color_Adjustment_2.gad = 

GROUP simple "Color" flat 
{ 
    VALUE(PhysicalSun1_Color_Adjustment_2.gad.val) LAYOUT(vertical) HSTRETCH 
	    PhysicalSun1_redblueshift.gad;		
	    PhysicalSun1_saturation.gad;		
	    PhysicalSun1_saturation_affects_color_adjustments.gad;		
} 

PhysicalSun1_General_0.gad = 

GROUP simple "General" flat 
{ 
    VALUE(PhysicalSun1_General_0.gad.val) LAYOUT(vertical) HSTRETCH 
} 

folder4.gad = 

GROUP simple "Intensity" flat 
{ 
    VALUE(folder4.gad.val) LAYOUT(vertical) HSTRETCH 
	    PhysicalSun1_multiplier.gad;		
	    PhysicalSun1_useNonPhysicalIntensity.gad;		
} 

folder3.gad = 

GROUP simple "Light" flat 
{ 
    VALUE(folder3.gad.val) LAYOUT(vertical) HSTRETCH 
	    light_enabled.gad;		
	    PhysicalSun1_on.gad;		
	    PhysicalSky1_on.gad;		
	    ogl_enablelight.gad;		
	    PhysicalSky1_model.gad;		
	    PhysicalSun1_model.gad;		
} 

folder1_2.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG2 flat "folder1_2.gad"
    { 
	VALUE(folder1_2.gad.val) STRETCH(1,0)

	TAB "Viewing Options"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    tdisplay.row.join;		
	    l_iconscale.gad;		
	    caching.gad;		
	    picking.gad;		
	    pickscript.gad;		

	    { STRETCH(1,1) }
	}

	TAB "Lookat Options"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    lookatpath.gad;		
	    lookup.gad;		

	    { STRETCH(1,1) }
	}

	TAB "Path Options"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    pathobjpath.gad;		
	    roll.gad;		
	    pos.gad;		
	    uparmtype.gad;		
	    pathorient.gad;		
	    up.gad;		
	    bank.gad;		

	    { STRETCH(1,1) }
	}
    } 
}

folder0.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG2 flat "folder0.gad"
    { 
	VALUE(folder0.gad.val) STRETCH(1,0)

	TAB "Transform"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    keeppos.row.join;		
	    xOrd.row.join;		
	    t.gad;		
	    r.gad;		
	    folder1_2.gad;		

	    { STRETCH(1,1) }
	}

	TAB "Light"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    folder3.gad;		
	    folder4.gad;		
	    PhysicalSun1_Color_Adjustment_2.gad;		
	    PhysicalSun1_Atmosphere_1.gad;		
	    folder9.gad;		
	    PhysicalSky1_Overrides_4.gad;		
	    folder1.gad;		
	    PhysicalSun1_Shadow_3.gad;		
	    folder2.gad;		
	    folder7.gad;		
	    folder6.gad;		

	    { STRETCH(1,1) }
	}

	TAB "Objects"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    RSL_setInclusive.gad;		
	    RSL_lightLinking.gad;		
	    RSL_shadowLinking.gad;		

	    { STRETCH(1,1) }
	}
    } 
}

dialog_norm.gad = 
{
    LAYOUT(vertical) SPACING(0.02) HSTRETCH 
    folder0.gad; 
    projection.gad; 
    childcomp.gad; 
    lookupobjpath.gad; 
    constraints_on.gad; 
    constraints_path.gad; 
    pr.gad; 
} 
// dialog.bot.ui

extrastuffstowbar_minimize.val := 1;

dialog = OPENNOTIFIER
{
    LAYOUT(vertical) SPACING(0.02) LOOK(bg) VALUE(open.val_) HSTRETCH

    { HEIGHT(1p) LOOK(bg) HSTRETCH }

    dialog_norm.gad;
}
